recorddef(record) ::= <<
record <record.name>
    <record.annotations.keys: {k| @<k> <record.annotations.(k)>}; separator="\n"> 
  extends 
    <record.supername; separator=", "> 
{
  <record.members: memberdef(); separator=";\n"><if(record.members)>;<endif>
}
  <record.globals: globaldef() ; separator="\n">
  
  <record.procedures: methoddef(); separator="\n"><\n><\n>
>>

memberdef(it) ::= <<
<it.type> <it.name> <it.annotations.keys: {k| @<k> <it.annotations.(k)>}; separator=" ">
>>

globaldef(it) ::= <<
global <it.type> @@<it.name> <it.annotations.keys: {k| @<k> <it.annotations.(k)>;}; separator=" ">
>>

methoddef(it) ::= <<
procedure <it.returnType> <it.name> (<it.parameters; separator=", ">) 
  <it.annotations.keys: {k| @<k> <it.annotations.(k)>}; separator="\n"> 
{
  <it.locals; separator=";\n">;<\n>
  <it.code : {x| #<x>;}; separator="\n">
    <it.catch: {x| catch <x.typ> @[<x.start>..<x.end>] goto <x.handler>;}; separator="\n">
}
>>

innerclassdef(name, outerName, innerName, access) ::= <<(
  @Name <name><if(outerName)>, 
  @OuterName <outerName><endif><if(innerName)>, 
  @InnerName <innerName><endif><if(access)>, 
  @AccessFlag <access><endif><\n> )
>>

outerclassdef(owner, method) ::= <<
<owner><if(method)>, {|<method>|}<endif>
>>
 
framedef(type, nLocal, local, nStack, stack) ::= <<
\<@Frame (@<type>, <nLocal>, `[<local; separator=", ">], <nStack>, `[<stack; separator=", ">])>
>>

localdef(i, id, start, end, signature, type) ::= <<
(<i>, :<id>, <type>, :<start>, :<end><if(signature)>, <signature><endif>)
>>

switchins(var, blocks, dflt) ::= <<
switch <var>
            <blocks.keys: {k| | <k> => goto <blocks.(k)>}; separator="\n">
            | => goto <dflt>
>> 

classsigdef(text, typeparam, superclass, interface) ::= <<
(
  "$text$",
  @TypeParam$if(typeparam)$ (
    $typeparam; separator=",\n"$
  )$endif$,
  $superclass$,
  @InterfaceBounds$if(interface)$ (
    $interface; separator=",\n"$
  )$endif$
)
>>

methodsigdef(text, typeparam, paramtype, returntype, exceptiontype) ::= <<
(
  "$text$",
  @TypeParam$if(typeparam)$ (
    $typeparam; separator=",\n"$
  )$endif$,
  @ParamTypes$if(paramtype)$ (
    $paramtype; separator=",\n"$
  )$endif$,
  $returntype$,
  @ExceptionTypes$if(exceptiontype)$ (
    $exceptiontype; separator=",\n"$
  )$endif$
)
>>

typesigdef(text, element) ::= <<
(
  "$text$", 
  $element$
)
>>

typeparamsigdef(name, classbound, interfacebound) ::= <<
@TypeParam (
  $name$$if(classbound)$,
  $classbound$$endif$$if(interfacebound)$,
  $interfacebound; separator=",\n"$$endif$
)
>>

classboundsigdef(element) ::= <<
@ClassBound (
  $element$
)
>>

interfaceboundsigdef(element) ::= <<
@InterfaceBound (
  $element$
)
>>

paramtypesigdef(element) ::= <<
@ParamType (
  $element$
)
>>

superclasssigdef(element) ::= <<
@SuperClass (
  $element$
)
>>

interfacesigdef(element) ::= <<
@Interface (
  $element$
)
>>

returntypesigdef(element) ::= <<
@ReturnType (
  $element$
)
>>

exceptionatypesigdef(element) ::= <<
@ExceptionType (
  $element$
)
>>

basetypesigdef(desc) ::= <<
@BaseType `$desc$
>>

typevarsigdef(name) ::= <<
@TypeVar $name$
>>

arraytypesigdef(element) ::= <<
@ArrayType (
  $element$
)
>>

classtypesigdef(name, typearg, innerclass) ::= <<
@ClassType (
  $name$$if(typearg)$,
  $typearg; separator=",\n"$$endif$$if(innerclass)$,
  $innerclass; separator=",\n"$$endif$
)
>>

innerclasstypesigdef(name, typearg, innerclass) ::= <<
@InnerClassType (
  $name$$if(typearg)$,
  $typearg; separator=",\n"$$endif$
)
>>

typeargsigdef(name, element) ::= <<
@$name$TypeArg (
  $element$
)
>>