record (|java.util.HashMap|)
    @source "HashMap.java"
    @type class
    @AccessFlag (PUBLIC)
    @InnerClass (
      @Name (|java.util.Map$Entry|), 
      @OuterName (|java.util.Map|), 
      @InnerName Entry, 
      @AccessFlag (PUBLIC,INTERFACE,STATIC)
     ) 
  extends 
    (|java.util.AbstractMap|) 
{
  (|int|) <|HashMap.DEFAULT_INITIAL_CAPACITY|> @AccessFlag (STATIC,FINAL);
  (|int|) <|HashMap.MAXIMUM_CAPACITY|> @AccessFlag (STATIC,FINAL);
  (|float|) <|HashMap.DEFAULT_LOAD_FACTOR|> @AccessFlag (STATIC,FINAL);
  (|java.util.HashMap$Entry[]|) <|HashMap.EMPTY_TABLE|> @AccessFlag (STATIC,FINAL);
  (|java.util.HashMap$Entry[]|) <|HashMap.table|> @AccessFlag (TRANSIENT,VARARGS);
  (|int|) <|HashMap.size|> @AccessFlag (TRANSIENT,VARARGS);
  (|int|) <|HashMap.threshold|> @AccessFlag ();
  (|float|) <|HashMap.loadFactor|> @AccessFlag (FINAL);
  (|int|) <|HashMap.modCount|> @AccessFlag (TRANSIENT,VARARGS);
  (|int|) <|HashMap.ALTERNATIVE_HASHING_THRESHOLD_DEFAULT|> @AccessFlag (STATIC,FINAL);
  (|int|) <|HashMap.hashSeed|> @AccessFlag (TRANSIENT,VARARGS);
  (|java.util.Set|) <|HashMap.entrySet|> @AccessFlag (PRIVATE,TRANSIENT,VARARGS);
  (|long|) <|HashMap.serialVersionUID|> @AccessFlag (PRIVATE,STATIC,FINAL);
}

  procedure (|void|) {|java.util.HashMap.<init>(IF)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|], (|float|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC,CONSTRUCTOR)
    @Signature "java.util.HashMap.<init>(IF)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    s3;
    s4;
    s5;
    s6;


    #L00000a. call s0:= {|java.util.AbstractMap.<init>()V|}([|v0|]) @signature "java.util.AbstractMap.<init>()V" @classDescriptor [|java.util.AbstractMap|] @type special;
    #L00001a. s0:= +|java.util.HashMap.EMPTY_TABLE|+;
    #L00001b. [|v0|].<|java.util.HashMap.table|>:= ((|[Ljava.util.HashMap$Entry;|)) s0;
    #L00002a. [|v0|].<|java.util.HashMap.hashSeed|>:= 0;
    #L00003a. [|v0|].<|java.util.HashMap.entrySet|>:= null;
    #L00004a. if [|v1|] <= 0 then goto L00005a;
    #L00006a. s0:= new (|java.lang.IllegalArgumentException|);
    #L00006b. s1:= new (|java.lang.StringBuilder|);
    #L00006c. call s2:= {|java.lang.StringBuilder.<init>()V|}(s1) @signature "java.lang.StringBuilder.<init>()V" @classDescriptor [|java.lang.StringBuilder|] @type special;
    #L00006d. call s3:= {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s1,"Illegal initial capacity: ") @signature "java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00006e. call s4:= {|java.lang.StringBuilder.append(I)Ljava.lang.StringBuilder;|}(s3,[|v1|]) @signature "java.lang.StringBuilder.append(I)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00006f. call s5:= {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s4) @signature "java.lang.StringBuilder.toString()Ljava/lang/String;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00006g. call s6:= {|java.lang.IllegalArgumentException.<init>(Ljava.lang.String;)V|}(s0,s5) @signature "java.lang.IllegalArgumentException.<init>(Ljava/lang/String;)V" @classDescriptor [|java.lang.IllegalArgumentException|] @type special;
    #L00006h. throw s0;
    #L00005a. <@Frame (@Full, 3, `[(|java.lang.Object|), (|int|), (|float|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00005b. if [|v1|] >= "1073741824" then goto L00007a;
    #L00008a. [|v1|]:= "1073741824" @type ;
    #L00007a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|float|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00007b. s0:= fcmpg(0.0,[|v2|]);
    #L00007c. if s0 >= 0 then goto L00009a;
    #L00007d. call s1:= {|java.lang.Float.isNaN(F)Z|}([|v2|]) @signature "java.lang.Float.isNaN(F)Z" @classDescriptor [|java.lang.Float|] @type direct;
    #L00007e. if s1 == 0 then goto L00010a;
    #L00009a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|float|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00009b. s0:= new (|java.lang.IllegalArgumentException|);
    #L00009c. s1:= new (|java.lang.StringBuilder|);
    #L00009d. call s2:= {|java.lang.StringBuilder.<init>()V|}(s1) @signature "java.lang.StringBuilder.<init>()V" @classDescriptor [|java.lang.StringBuilder|] @type special;
    #L00009e. call s3:= {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s1,"Illegal load factor: ") @signature "java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00009f. call s4:= {|java.lang.StringBuilder.append(F)Ljava.lang.StringBuilder;|}(s3,[|v2|]) @signature "java.lang.StringBuilder.append(F)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00009g. call s5:= {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s4) @signature "java.lang.StringBuilder.toString()Ljava/lang/String;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00009h. call s6:= {|java.lang.IllegalArgumentException.<init>(Ljava.lang.String;)V|}(s0,s5) @signature "java.lang.IllegalArgumentException.<init>(Ljava/lang/String;)V" @classDescriptor [|java.lang.IllegalArgumentException|] @type special;
    #L00009i. throw s0;
    #L00010a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|float|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00010b. [|v0|].<|java.util.HashMap.loadFactor|>:= [|v2|];
    #L00011a. [|v0|].<|java.util.HashMap.threshold|>:= [|v1|];
    #L00012a. call s0:= {|java.util.HashMap.init()V|}([|v0|]) @signature "java.util.HashMap.init()V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00013a. return @void;
  }
  procedure (|void|) {|java.util.HashMap.<init>(I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC,CONSTRUCTOR)
    @Signature "java.util.HashMap.<init>(I)V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap.<init>(IF)V|}([|v0|],[|v1|],0.75) @signature "java.util.HashMap.<init>(IF)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00001a. return @void;
  }
  procedure (|void|) {|java.util.HashMap.<init>()V|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC,CONSTRUCTOR)
    @Signature "java.util.HashMap.<init>()V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap.<init>(IF)V|}([|v0|],16,0.75) @signature "java.util.HashMap.<init>(IF)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00001a. return @void;
  }
  procedure (|void|) {|java.util.HashMap.<init>(Ljava.util.Map;)V|} ((|java.util.HashMap|) [|v0|], (|java.util.Map|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC,CONSTRUCTOR)
    @Signature "java.util.HashMap.<init>(Ljava/util/Map;)V" 
  {
    local dummy;
    s0;
    s1;
    s2;


    #L00000a. call s0:= {|java.util.Map.size()I|}([|v1|]) @signature "java.util.Map.size()I" @classDescriptor [|java.util.Map|] @type interface;
    #L00000b. call s1:= {|java.lang.Math.max(II)I|}(s0/0.75+1,16) @signature "java.lang.Math.max(II)I" @classDescriptor [|java.lang.Math|] @type direct;
    #L00000c. call s2:= {|java.util.HashMap.<init>(IF)V|}([|v0|],s1,0.75) @signature "java.util.HashMap.<init>(IF)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00001a. s0:= [|v0|].<|java.util.HashMap.threshold|>;
    #L00001b. call s1:= {|java.util.HashMap.inflateTable(I)V|}([|v0|],s0) @signature "java.util.HashMap.inflateTable(I)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00002a. call s0:= {|java.util.HashMap.putAllForCreate(Ljava.util.Map;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap.putAllForCreate(Ljava/util/Map;)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00003a. return @void;
  }
  procedure (|int|) {|java.util.HashMap.roundUpToPowerOf2(I)I|} ((|int|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE,STATIC)
    @Signature "java.util.HashMap.roundUpToPowerOf2(I)I" 
  {
    local dummy;
    s0;
    s1;
    [|v1|];


    #L00000a. if [|v0|] > "1073741824" then goto L00001a;
    #L00000b. goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001b. call s0:= {|java.lang.Integer.highestOneBit(I)I|}([|v0|]) @signature "java.lang.Integer.highestOneBit(I)I" @classDescriptor [|java.lang.Integer|] @type direct;
    #L00001c. [|v1|]:= s0 @type (|java.lang.Object|);
    #L00001d. if s0 == 0 then goto L00003a;
    #L00001e. call s1:= {|java.lang.Integer.bitCount(I)I|}([|v0|]) @signature "java.lang.Integer.bitCount(I)I" @classDescriptor [|java.lang.Integer|] @type direct;
    #L00001f. if s1 >= 1 then goto L00004a;
    #L00001g. goto L00002a;
    #L00004a. <@Frame (@Append, 1, `[(|int|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004b. goto L00002a;
    #L00003a. <@Frame (@Same, 0, `[(|int|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002a. <@Frame (@Full, 1, `[(|int|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002b. [|v1|]:= 1 @type (|int|);
    #L00005a. return [|v1|];
  }
  procedure (|void|) {|java.util.HashMap.inflateTable(I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.inflateTable(I)V" 
  {
    local dummy;
    s0;
    s1;
    [|v2|];


    #L00000a. call s0:= {|java.util.HashMap.roundUpToPowerOf2(I)I|}([|v1|]) @signature "java.util.HashMap.roundUpToPowerOf2(I)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00000b. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00001a. s0:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00001b. call s1:= {|java.lang.Math.min(FF)F|}([|v2|]*s0,1.07374182E9) @signature "java.lang.Math.min(FF)F" @classDescriptor [|java.lang.Math|] @type direct;
    #L00001c. [|v0|].<|java.util.HashMap.threshold|>:= s1;
    #L00002a. s0:= new (|java.util.HashMap$Entry|)[[|v2|]];
    #L00002b. [|v0|].<|java.util.HashMap.table|>:= s0;
    #L00003a. call s0:= {|java.util.HashMap.initHashSeedAsNeeded(I)Z|}([|v0|],[|v2|]) @signature "java.util.HashMap.initHashSeedAsNeeded(I)Z" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00004a. return @void;
  }
  procedure (|void|) {|java.util.HashMap.init()V|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 0
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.init()V" 
  {
    local dummy;


    #L00000a. return @void;
  }
  procedure (|boolean|) {|java.util.HashMap.initHashSeedAsNeeded(I)Z|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Signature "java.util.HashMap.initHashSeedAsNeeded(I)Z" 
  {
    local dummy;
    s0;
    s1;
    [|v2|];
    [|v3|];
    [|v4|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.hashSeed|>;
    #L00000b. if s0 == 0 then goto L00001a;
    #L00000c. goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002a. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002b. [|v2|]:= 0 @type (|int|);
    #L00003a. call s0:= {|sun.misc.VM.isBooted()Z|}() @signature "sun.misc.VM.isBooted()Z" @classDescriptor [|sun.misc.VM|] @type direct;
    #L00003b. if s0 == 0 then goto L00004a;
    #L00003c. s1:= +|java.util.HashMap$Holder.ALTERNATIVE_HASHING_THRESHOLD|+;
    #L00003d. if [|v1|] > s1 then goto L00004a;
    #L00003e. goto L00005a;
    #L00004a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|)])>
    #L00005a. <@Frame (@Same1, 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00005b. [|v3|]:= 0 @type (|int|);
    #L00006a. [|v4|]:= [|v2|]^~[|v3|] @type (|int|);
    #L00007a. if [|v4|] == 0 then goto L00008a;
    #L00009a. if [|v3|] == 0 then goto L00010a;
    #L00009b. call s0:= {|sun.misc.Hashing.randomHashSeed(Ljava.lang.Object;)I|}([|v0|]) @signature "sun.misc.Hashing.randomHashSeed(Ljava/lang/Object;)I" @classDescriptor [|sun.misc.Hashing|] @type direct;
    #L00009c. goto L00011a;
    #L00010a. <@Frame (@Full, 5, `[(|java.lang.Object|), (|int|), (|int|), (|int|), (|int|)], 1, `[(|java.lang.Object|), (|top|)])>
    #L00011a. <@Frame (@Full, 5, `[(|java.lang.Object|), (|int|), (|int|), (|int|), (|int|)], 2, `[(|java.lang.Object|), (|int|)])>
    #L00011b. s0.<|java.util.HashMap.hashSeed|>:= 0;
    #L00008a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|int|), (|int|), (|int|)], 0, `[(|java.lang.Object|), (|int|)])>
    #L00008b. return [|v4|];
  }
  procedure (|int|) {|java.util.HashMap.hash(Ljava.lang.Object;)I|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Signature "java.util.HashMap.hash(Ljava/lang/Object;)I" 
  {
    local dummy;
    s0;
    [|v2|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.hashSeed|>;
    #L00000b. [|v2|]:= s0 @type (|int|);
    #L00001a. if 0 == [|v2|] then goto L00002a;
    #L00001b. s0:= instanceof @varname [|v1|] @type "(|java.lang.String|)";
    #L00001c. if s0 == 0 then goto L00002a;
    #L00003a. call s0:= {|sun.misc.Hashing.stringHash32(Ljava.lang.String;)I|}(((|java.lang.String|)) [|v1|]) @signature "sun.misc.Hashing.stringHash32(Ljava/lang/String;)I" @classDescriptor [|sun.misc.Hashing|] @type direct;
    #L00003b. return s0;
    #L00002a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00002b. call s0:= {|java.lang.Object.hashCode()I|}([|v1|]) @signature "java.lang.Object.hashCode()I" @classDescriptor [|java.lang.Object|] @type virtual;
    #L00002c. [|v2|]:= [|v2|]^~s0 @type (|int|);
    #L00004a. [|v2|]:= [|v2|]^~[|v2|]^>>>20^~[|v2|]^>>>12 @type (|int|);
    #L00005a. return [|v2|]^~[|v2|]^>>>7^~[|v2|]^>>>4;
  }
  procedure (|int|) {|java.util.HashMap.indexFor(II)I|} ((|int|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (STATIC)
    @Signature "java.util.HashMap.indexFor(II)I" 
  {
    local dummy;


    #L00000a. return [|v0|]^&[|v1|]-1;
  }
  procedure (|int|) {|java.util.HashMap.size()I|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.size()I" 
  {
    local dummy;
    s0;


    #L00000a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00000b. return s0;
  }
  procedure (|boolean|) {|java.util.HashMap.isEmpty()Z|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.isEmpty()Z" 
  {
    local dummy;
    s0;


    #L00000a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00000b. if s0 != 0 then goto L00001a;
    #L00000c. goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|)], 0, `[(|top|)])>
    #L00002a. <@Frame (@Same1, 0, `[(|top|)], 1, `[(|int|)])>
    #L00002b. return 0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.get(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    [|v2|];


    #L00000a. if [|v1|] != null then goto L00001a;
    #L00002a. call s0:= {|java.util.HashMap.getForNullKey()Ljava.lang.Object;|}([|v0|]) @signature "java.util.HashMap.getForNullKey()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap|] @type special;
    #L00002b. return s0;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001b. call s0:= {|java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}([|v0|],[|v1|]) @signature "java.util.HashMap.getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00001c. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00003a. if null != [|v2|] then goto L00004a;
    #L00003b. goto L00005a;
    #L00004a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004b. call s0:= {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|}([|v2|]) @signature "java.util.HashMap$Entry.getValue()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00005a. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|), (|top|)], 1, `[(|java.lang.Object|), (|top|)])>
    #L00005b. return s0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.getForNullKey()Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.getForNullKey()Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    s1;
    [|v1|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00000b. if s0 != 0 then goto L00001a;
    #L00002a. return null;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001b. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00001c. s1:= s0[0];
    #L00001d. [|v1|]:= s1 @type (|java.lang.Object|);
    #L00003a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00003b. if [|v1|] == null then goto L00004a;
    #L00005a. s0:= [|v1|].<|java.util.HashMap$Entry.key|>;
    #L00005b. if s0 != null then goto L00006a;
    #L00007a. s0:= [|v1|].<|java.util.HashMap$Entry.value|>;
    #L00007b. return s0;
    #L00006a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006b. s0:= [|v1|].<|java.util.HashMap$Entry.next|>;
    #L00006c. [|v1|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00006d. goto L00003a;
    #L00004a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004b. return null;
  }
  procedure (|boolean|) {|java.util.HashMap.containsKey(Ljava.lang.Object;)Z|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.containsKey(Ljava/lang/Object;)Z" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}([|v0|],[|v1|]) @signature "java.util.HashMap.getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000b. if s0 == null then goto L00001a;
    #L00000c. goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002a. <@Frame (@Same1, 0, `[(|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002b. return 0;
  }
  procedure (|java.util.HashMap$Entry|) {|java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Signature "java.util.HashMap.getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" 
  {
    local dummy;
    s0;
    s1;
    s2;
    s3;
    [|v2|];
    [|v3|];
    [|v4|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00000b. if s0 != 0 then goto L00001a;
    #L00002a. return null;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00001b. if [|v1|] != null then goto L00003a;
    #L00001c. goto L00004a;
    #L00003a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00003b. call s0:= {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v1|]) @signature "java.util.HashMap.hash(Ljava/lang/Object;)I" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00004a. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|)])>
    #L00004b. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00005a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00005b. s1:= [|v0|].<|java.util.HashMap.table|>;
    #L00005c. call s2:= {|java.util.HashMap.indexFor(II)I|}([|v2|],s1.length) @signature "java.util.HashMap.indexFor(II)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00005d. s3:= s0[s2];
    #L00005e. [|v3|]:= s3 @type (|java.lang.Object|);
    #L00006a. <@Frame (@Append, 2, `[(|int|), (|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00006b. if [|v3|] == null then goto L00007a;
    #L00008a. s0:= [|v3|].<|java.util.HashMap$Entry.hash|>;
    #L00008b. if s0 != [|v2|] then goto L00009a;
    #L00008c. s1:= [|v3|].<|java.util.HashMap$Entry.key|>;
    #L00008d. [|v4|]:= s1 @type (|java.lang.Object|);
    #L00008e. if s1 == [|v1|] then goto L00010a;
    #L00008f. if [|v1|] == null then goto L00009a;
    #L00008g. call s2:= {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],[|v4|]) @signature "java.lang.Object.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.lang.Object|] @type virtual;
    #L00008h. if s2 == 0 then goto L00009a;
    #L00010a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00010b. return [|v3|];
    #L00009a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00009b. s0:= [|v3|].<|java.util.HashMap$Entry.next|>;
    #L00009c. [|v3|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00009d. goto L00006a;
    #L00007a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00007b. return null;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|], (|java.lang.Object|) [|v2|]) 
    @MaxLocals 8
    @MaxStack 5
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];
    [|v7|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00000b. s1:= +|java.util.HashMap.EMPTY_TABLE|+;
    #L00000c. if s0 != s1 then goto L00001a;
    #L00002a. s0:= [|v0|].<|java.util.HashMap.threshold|>;
    #L00002b. call s1:= {|java.util.HashMap.inflateTable(I)V|}([|v0|],s0) @signature "java.util.HashMap.inflateTable(I)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001b. if [|v1|] != null then goto L00003a;
    #L00004a. call s0:= {|java.util.HashMap.putForNullKey(Ljava.lang.Object;)Ljava.lang.Object;|}([|v0|],[|v2|]) @signature "java.util.HashMap.putForNullKey(Ljava/lang/Object;)Ljava/lang/Object;" @classDescriptor [|java.util.HashMap|] @type special;
    #L00004b. return s0;
    #L00003a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003b. call s0:= {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v1|]) @signature "java.util.HashMap.hash(Ljava/lang/Object;)I" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00003c. [|v3|]:= s0 @type (|java.lang.Object|);
    #L00005a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00005b. call s1:= {|java.util.HashMap.indexFor(II)I|}([|v3|],s0.length) @signature "java.util.HashMap.indexFor(II)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00005c. [|v4|]:= s1 @type (|java.lang.Object|);
    #L00006a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00006b. s1:= s0[[|v4|]];
    #L00006c. [|v5|]:= s1 @type (|java.lang.Object|);
    #L00007a. <@Frame (@Append, 3, `[(|int|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00007b. if [|v5|] == null then goto L00008a;
    #L00009a. s0:= [|v5|].<|java.util.HashMap$Entry.hash|>;
    #L00009b. if s0 != [|v3|] then goto L00010a;
    #L00009c. s1:= [|v5|].<|java.util.HashMap$Entry.key|>;
    #L00009d. [|v6|]:= s1 @type (|java.lang.Object|);
    #L00009e. if s1 == [|v1|] then goto L00011a;
    #L00009f. call s2:= {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],[|v6|]) @signature "java.lang.Object.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.lang.Object|] @type virtual;
    #L00009g. if s2 == 0 then goto L00010a;
    #L00011a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00011b. s0:= [|v5|].<|java.util.HashMap$Entry.value|>;
    #L00011c. [|v7|]:= s0 @type (|java.lang.Object|);
    #L00012a. [|v5|].<|java.util.HashMap$Entry.value|>:= [|v2|];
    #L00013a. call s0:= {|java.util.HashMap$Entry.recordAccess(Ljava.util.HashMap;)V|}([|v5|],[|v0|]) @signature "java.util.HashMap$Entry.recordAccess(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00014a. return [|v7|];
    #L00010a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00010b. s0:= [|v5|].<|java.util.HashMap$Entry.next|>;
    #L00010c. [|v5|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00010d. goto L00007a;
    #L00008a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00008b. s0:= [|v0|].<|java.util.HashMap.modCount|>;
    #L00008c. [|v0|].<|java.util.HashMap.modCount|>:= s0+1;
    #L00015a. call s0:= {|java.util.HashMap.addEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|}([|v0|],[|v3|],[|v1|],[|v2|],[|v4|]) @signature "java.util.HashMap.addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00016a. return null;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.putForNullKey(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 4
    @MaxStack 5
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.putForNullKey(Ljava/lang/Object;)Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    s1;
    [|v2|];
    [|v3|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00000b. s1:= s0[0];
    #L00000c. [|v2|]:= s1 @type (|java.lang.Object|);
    #L00001a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001b. if [|v2|] == null then goto L00002a;
    #L00003a. s0:= [|v2|].<|java.util.HashMap$Entry.key|>;
    #L00003b. if s0 != null then goto L00004a;
    #L00005a. s0:= [|v2|].<|java.util.HashMap$Entry.value|>;
    #L00005b. [|v3|]:= s0 @type (|java.lang.Object|);
    #L00006a. [|v2|].<|java.util.HashMap$Entry.value|>:= [|v1|];
    #L00007a. call s0:= {|java.util.HashMap$Entry.recordAccess(Ljava.util.HashMap;)V|}([|v2|],[|v0|]) @signature "java.util.HashMap$Entry.recordAccess(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00008a. return [|v3|];
    #L00004a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00004b. s0:= [|v2|].<|java.util.HashMap$Entry.next|>;
    #L00004c. [|v2|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00004d. goto L00001a;
    #L00002a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002b. s0:= [|v0|].<|java.util.HashMap.modCount|>;
    #L00002c. [|v0|].<|java.util.HashMap.modCount|>:= s0+1;
    #L00009a. call s0:= {|java.util.HashMap.addEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|}([|v0|],0,null,[|v1|],0) @signature "java.util.HashMap.addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00010a. return null;
  }
  procedure (|void|) {|java.util.HashMap.putForCreate(Ljava.lang.Object;Ljava.lang.Object;)V|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|], (|java.lang.Object|) [|v2|]) 
    @MaxLocals 7
    @MaxStack 5
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];


    #L00000a. if null != [|v1|] then goto L00001a;
    #L00000b. goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001b. call s0:= {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v1|]) @signature "java.util.HashMap.hash(Ljava/lang/Object;)I" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00002a. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002b. [|v3|]:= s0 @type (|java.lang.Object|);
    #L00003a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00003b. call s1:= {|java.util.HashMap.indexFor(II)I|}([|v3|],s0.length) @signature "java.util.HashMap.indexFor(II)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00003c. [|v4|]:= s1 @type (|java.lang.Object|);
    #L00004a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00004b. s1:= s0[[|v4|]];
    #L00004c. [|v5|]:= s1 @type (|java.lang.Object|);
    #L00005a. <@Frame (@Append, 3, `[(|int|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00005b. if [|v5|] == null then goto L00006a;
    #L00007a. s0:= [|v5|].<|java.util.HashMap$Entry.hash|>;
    #L00007b. if s0 != [|v3|] then goto L00008a;
    #L00007c. s1:= [|v5|].<|java.util.HashMap$Entry.key|>;
    #L00007d. [|v6|]:= s1 @type (|java.lang.Object|);
    #L00007e. if s1 == [|v1|] then goto L00009a;
    #L00007f. if [|v1|] == null then goto L00008a;
    #L00007g. call s2:= {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],[|v6|]) @signature "java.lang.Object.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.lang.Object|] @type virtual;
    #L00007h. if s2 == 0 then goto L00008a;
    #L00009a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00009b. [|v5|].<|java.util.HashMap$Entry.value|>:= [|v2|];
    #L00010a. return @void;
    #L00008a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00008b. s0:= [|v5|].<|java.util.HashMap$Entry.next|>;
    #L00008c. [|v5|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00008d. goto L00005a;
    #L00006a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00006b. call s0:= {|java.util.HashMap.createEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|}([|v0|],[|v3|],[|v1|],[|v2|],[|v4|]) @signature "java.util.HashMap.createEntry(ILjava/lang/Object;Ljava/lang/Object;I)V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00011a. return @void;
  }
  procedure (|void|) {|java.util.HashMap.putAllForCreate(Ljava.util.Map;)V|} ((|java.util.HashMap|) [|v0|], (|java.util.Map|) [|v1|]) 
    @MaxLocals 4
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.putAllForCreate(Ljava/util/Map;)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v2|];
    [|v3|];


    #L00000a. call s0:= {|java.util.Map.entrySet()Ljava.util.Set;|}([|v1|]) @signature "java.util.Map.entrySet()Ljava/util/Set;" @classDescriptor [|java.util.Map|] @type interface;
    #L00000b. call s1:= {|java.util.Set.iterator()Ljava.util.Iterator;|}(s0) @signature "java.util.Set.iterator()Ljava/util/Iterator;" @classDescriptor [|java.util.Set|] @type interface;
    #L00000c. [|v2|]:= s1 @type (|java.lang.Object|);
    #L00001a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00001b. call s0:= {|java.util.Iterator.hasNext()Z|}([|v2|]) @signature "java.util.Iterator.hasNext()Z" @classDescriptor [|java.util.Iterator|] @type interface;
    #L00001c. if s0 == 0 then goto L00002a;
    #L00001d. call s1:= {|java.util.Iterator.next()Ljava.lang.Object;|}([|v2|]) @signature "java.util.Iterator.next()Ljava/lang/Object;" @classDescriptor [|java.util.Iterator|] @type interface;
    #L00001e. [|v3|]:= ((|java.util.Map$Entry|)) s1 @type (|java.util.Map$Entry|);
    #L00003a. call s0:= {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v3|]) @signature "java.util.Map$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00003b. call s1:= {|java.util.Map$Entry.getValue()Ljava.lang.Object;|}([|v3|]) @signature "java.util.Map$Entry.getValue()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00003c. call s2:= {|java.util.HashMap.putForCreate(Ljava.lang.Object;Ljava.lang.Object;)V|}([|v0|],s0,s1) @signature "java.util.HashMap.putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00003d. goto L00001a;
    #L00002a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00002b. return @void;
  }
  procedure (|void|) {|java.util.HashMap.resize(I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.resize(I)V" 
  {
    local dummy;
    s0;
    s1;
    [|v2|];
    [|v3|];
    [|v4|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00000b. [|v2|]:= s0 @type (|java.util.HashMap$Entry[]|);
    #L00001a. [|v3|]:= [|v2|].length @type (|int|);
    #L00002a. if [|v3|] != "1073741824" then goto L00003a;
    #L00004a. [|v0|].<|java.util.HashMap.threshold|>:= "2147483647";
    #L00005a. return @void;
    #L00003a. <@Frame (@Append, 2, `[(|java.util.HashMap$Entry[]|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00003b. s0:= new (|java.util.HashMap$Entry|)[[|v1|]];
    #L00003c. [|v4|]:= s0 @type (|java.lang.Object|);
    #L00006a. call s0:= {|java.util.HashMap.initHashSeedAsNeeded(I)Z|}([|v0|],[|v1|]) @signature "java.util.HashMap.initHashSeedAsNeeded(I)Z" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00006b. call s1:= {|java.util.HashMap.transfer([Ljava.util.HashMap$Entry;Z)V|}([|v0|],[|v4|],s0) @signature "java.util.HashMap.transfer([Ljava/util/HashMap$Entry;Z)V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00007a. [|v0|].<|java.util.HashMap.table|>:= [|v4|];
    #L00008a. s0:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00008b. call s1:= {|java.lang.Math.min(FF)F|}([|v1|]*s0,1.07374182E9) @signature "java.lang.Math.min(FF)F" @classDescriptor [|java.lang.Math|] @type direct;
    #L00008c. [|v0|].<|java.util.HashMap.threshold|>:= s1;
    #L00009a. return @void;
  }
  procedure (|void|) {|java.util.HashMap.transfer([Ljava.util.HashMap$Entry;Z)V|} ((|java.util.HashMap|) [|v0|], (|java.util.HashMap$Entry[]|) [|v1|], (|boolean|) [|v2|]) 
    @MaxLocals 10
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.transfer([Ljava/util/HashMap$Entry;Z)V" 
  {
    local dummy;
    s0;
    s1;
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];
    [|v7|];
    [|v8|];
    [|v9|];


    #L00000a. [|v3|]:= [|v1|].length @type (|int|);
    #L00001a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00001b. [|v4|]:= s0 @type (|java.util.HashMap$Entry[]|);
    #L00001c. [|v5|]:= [|v4|].length @type (|int|);
    #L00001d. [|v6|]:= 0 @type (|int|);
    #L00002a. <@Frame (@Full, 7, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00002b. if [|v6|] <= [|v5|] then goto L00003a;
    #L00002c. s0:= [|v4|][[|v6|]];
    #L00002d. [|v7|]:= s0 @type (|java.lang.Object|);
    #L00004a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00004b. if null == [|v7|] then goto L00005a;
    #L00006a. s0:= [|v7|].<|java.util.HashMap$Entry.next|>;
    #L00006b. [|v8|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00007a. if [|v2|] == 0 then goto L00008a;
    #L00009a. s0:= [|v7|].<|java.util.HashMap$Entry.key|>;
    #L00009b. if null != s0 then goto L00010a;
    #L00009c. goto L00011a;
    #L00010a. <@Frame (@Full, 9, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|)])>
    #L00010b. s0:= [|v7|].<|java.util.HashMap$Entry.key|>;
    #L00010c. call s1:= {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],s0) @signature "java.util.HashMap.hash(Ljava/lang/Object;)I" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00011a. <@Frame (@Full, 9, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 2, `[(|java.lang.Object|), (|int|), (|top|)])>
    #L00011b. 0.<|java.util.HashMap$Entry.hash|>:= s1;
    #L00008a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|int|), (|top|)])>
    #L00008b. s0:= [|v7|].<|java.util.HashMap$Entry.hash|>;
    #L00008c. call s1:= {|java.util.HashMap.indexFor(II)I|}(s0,[|v3|]) @signature "java.util.HashMap.indexFor(II)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00008d. [|v9|]:= s1 @type (|java.lang.Object|);
    #L00012a. s0:= [|v1|][[|v9|]];
    #L00012b. [|v7|].<|java.util.HashMap$Entry.next|>:= s0;
    #L00013a. [|v1|][[|v9|]]:= [|v7|];
    #L00014a. [|v7|]:= [|v8|] @type java.lang.Object;
    #L00015a. goto L00004a;
    #L00005a. <@Frame (@Chop, 2, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|int|), (|top|)])>
    #L00005b. [|v6|]:= [|v6|] + 1 @type (|int|);
    #L00005c. goto L00002a;
    #L00003a. <@Frame (@Chop, 3, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|int|), (|top|)])>
    #L00003b. return @void;
  }
  procedure (|void|) {|java.util.HashMap.putAll(Ljava.util.Map;)V|} ((|java.util.HashMap|) [|v0|], (|java.util.Map|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.putAll(Ljava/util/Map;)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    s3;
    [|v2|];
    [|v3|];
    [|v4|];


    #L00000a. call s0:= {|java.util.Map.size()I|}([|v1|]) @signature "java.util.Map.size()I" @classDescriptor [|java.util.Map|] @type interface;
    #L00000b. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00001a. if [|v2|] != 0 then goto L00002a;
    #L00003a. return @void;
    #L00002a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00002b. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00002c. s1:= +|java.util.HashMap.EMPTY_TABLE|+;
    #L00002d. if s0 != s1 then goto L00004a;
    #L00005a. s0:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00005b. s1:= [|v0|].<|java.util.HashMap.threshold|>;
    #L00005c. call s2:= {|java.lang.Math.max(FF)F|}([|v2|]*s0,s1) @signature "java.lang.Math.max(FF)F" @classDescriptor [|java.lang.Math|] @type direct;
    #L00005d. call s3:= {|java.util.HashMap.inflateTable(I)V|}([|v0|],s2) @signature "java.util.HashMap.inflateTable(I)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00004a. <@Frame (@Same, 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00004b. s0:= [|v0|].<|java.util.HashMap.threshold|>;
    #L00004c. if [|v2|] >= s0 then goto L00006a;
    #L00007a. s0:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00007b. [|v3|]:= [|v2|]/s0+1.0 @type (|int|);
    #L00008a. if [|v3|] >= "1073741824" then goto L00009a;
    #L00010a. [|v3|]:= "1073741824" @type ;
    #L00009a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00009b. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00009c. [|v4|]:= s0.length @type (|int|);
    #L00011a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00011b. if [|v4|] <= [|v3|] then goto L00012a;
    #L00013a. [|v4|]:= [|v4|]^<1 @type (|int|);
    #L00013b. goto L00011a;
    #L00012a. <@Frame (@Same, 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00012b. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00012c. if [|v4|] >= s0.length then goto L00006a;
    #L00014a. call s0:= {|java.util.HashMap.resize(I)V|}([|v0|],[|v4|]) @signature "java.util.HashMap.resize(I)V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00006a. <@Frame (@Chop, 2, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00006b. call s0:= {|java.util.Map.entrySet()Ljava.util.Set;|}([|v1|]) @signature "java.util.Map.entrySet()Ljava/util/Set;" @classDescriptor [|java.util.Map|] @type interface;
    #L00006c. call s1:= {|java.util.Set.iterator()Ljava.util.Iterator;|}(s0) @signature "java.util.Set.iterator()Ljava/util/Iterator;" @classDescriptor [|java.util.Set|] @type interface;
    #L00006d. [|v3|]:= s1 @type (|java.lang.Object|);
    #L00015a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00015b. call s0:= {|java.util.Iterator.hasNext()Z|}([|v3|]) @signature "java.util.Iterator.hasNext()Z" @classDescriptor [|java.util.Iterator|] @type interface;
    #L00015c. if s0 == 0 then goto L00016a;
    #L00015d. call s1:= {|java.util.Iterator.next()Ljava.lang.Object;|}([|v3|]) @signature "java.util.Iterator.next()Ljava/lang/Object;" @classDescriptor [|java.util.Iterator|] @type interface;
    #L00015e. [|v4|]:= ((|java.util.Map$Entry|)) s1 @type (|java.util.Map$Entry|);
    #L00017a. call s0:= {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v4|]) @signature "java.util.Map$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00017b. call s1:= {|java.util.Map$Entry.getValue()Ljava.lang.Object;|}([|v4|]) @signature "java.util.Map$Entry.getValue()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00017c. call s2:= {|java.util.HashMap.put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;|}([|v0|],s0,s1) @signature "java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00017d. goto L00015a;
    #L00016a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00016b. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.remove(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    [|v2|];


    #L00000a. call s0:= {|java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}([|v0|],[|v1|]) @signature "java.util.HashMap.removeEntryForKey(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000b. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00001a. if [|v2|] != null then goto L00002a;
    #L00001b. goto L00003a;
    #L00002a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002b. s0:= [|v2|].<|java.util.HashMap$Entry.value|>;
    #L00003a. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|), (|top|)], 1, `[(|java.lang.Object|), (|top|)])>
    #L00003b. return s0;
  }
  procedure (|java.util.HashMap$Entry|) {|java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 8
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Signature "java.util.HashMap.removeEntryForKey(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v2|];
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];
    [|v7|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00000b. if s0 != 0 then goto L00001a;
    #L00002a. return null;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00001b. if [|v1|] != null then goto L00003a;
    #L00001c. goto L00004a;
    #L00003a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00003b. call s0:= {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v1|]) @signature "java.util.HashMap.hash(Ljava/lang/Object;)I" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00004a. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|)])>
    #L00004b. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00005a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00005b. call s1:= {|java.util.HashMap.indexFor(II)I|}([|v2|],s0.length) @signature "java.util.HashMap.indexFor(II)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00005c. [|v3|]:= s1 @type (|java.lang.Object|);
    #L00006a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00006b. s1:= s0[[|v3|]];
    #L00006c. [|v4|]:= s1 @type (|java.lang.Object|);
    #L00007a. [|v5|]:= [|v4|] @type java.lang.Object;
    #L00008a. <@Frame (@Full, 6, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00008b. if [|v5|] == null then goto L00009a;
    #L00010a. s0:= [|v5|].<|java.util.HashMap$Entry.next|>;
    #L00010b. [|v6|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00011a. s0:= [|v5|].<|java.util.HashMap$Entry.hash|>;
    #L00011b. if s0 != [|v2|] then goto L00012a;
    #L00011c. s1:= [|v5|].<|java.util.HashMap$Entry.key|>;
    #L00011d. [|v7|]:= s1 @type (|java.lang.Object|);
    #L00011e. if s1 == [|v1|] then goto L00013a;
    #L00011f. if [|v1|] == null then goto L00012a;
    #L00011g. call s2:= {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],[|v7|]) @signature "java.lang.Object.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.lang.Object|] @type virtual;
    #L00011h. if s2 == 0 then goto L00012a;
    #L00013a. <@Frame (@Append, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00013b. s0:= [|v0|].<|java.util.HashMap.modCount|>;
    #L00013c. [|v0|].<|java.util.HashMap.modCount|>:= s0+1;
    #L00014a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00014b. [|v0|].<|java.util.HashMap.size|>:= s0-1;
    #L00015a. if [|v4|] != [|v5|] then goto L00016a;
    #L00017a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00017b. s0[[|v3|]]:= [|v6|];
    #L00017c. goto L00018a;
    #L00016a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00016b. [|v4|].<|java.util.HashMap$Entry.next|>:= [|v6|];
    #L00018a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00018b. call s0:= {|java.util.HashMap$Entry.recordRemoval(Ljava.util.HashMap;)V|}([|v5|],[|v0|]) @signature "java.util.HashMap$Entry.recordRemoval(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00019a. return [|v5|];
    #L00012a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00012b. [|v4|]:= [|v5|] @type java.lang.Object;
    #L00020a. [|v5|]:= [|v6|] @type java.lang.Object;
    #L00021a. goto L00008a;
    #L00009a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00009b. return [|v5|];
  }
  procedure (|java.util.HashMap$Entry|) {|java.util.HashMap.removeMapping(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 9
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Signature "java.util.HashMap.removeMapping(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" 
  {
    local dummy;
    s0;
    s1;
    [|v2|];
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];
    [|v7|];
    [|v8|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00000b. if s0 == 0 then goto L00001a;
    #L00000c. s1:= instanceof @varname [|v1|] @type "(|java.util.Map$Entry|)";
    #L00000d. if s1 != 0 then goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00001b. return null;
    #L00002a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00002b. [|v2|]:= ((|java.util.Map$Entry|)) [|v1|] @type (|java.util.Map$Entry|);
    #L00003a. call s0:= {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v2|]) @signature "java.util.Map$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00003b. [|v3|]:= s0 @type (|java.lang.Object|);
    #L00004a. if [|v3|] != null then goto L00005a;
    #L00004b. goto L00006a;
    #L00005a. <@Frame (@Append, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00005b. call s0:= {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v3|]) @signature "java.util.HashMap.hash(Ljava/lang/Object;)I" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00006a. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|)])>
    #L00006b. [|v4|]:= s0 @type (|java.lang.Object|);
    #L00007a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00007b. call s1:= {|java.util.HashMap.indexFor(II)I|}([|v4|],s0.length) @signature "java.util.HashMap.indexFor(II)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00007c. [|v5|]:= s1 @type (|java.lang.Object|);
    #L00008a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00008b. s1:= s0[[|v5|]];
    #L00008c. [|v6|]:= s1 @type (|java.lang.Object|);
    #L00009a. [|v7|]:= [|v6|] @type java.lang.Object;
    #L00010a. <@Frame (@Full, 8, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00010b. if [|v7|] == null then goto L00011a;
    #L00012a. s0:= [|v7|].<|java.util.HashMap$Entry.next|>;
    #L00012b. [|v8|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00013a. s0:= [|v7|].<|java.util.HashMap$Entry.hash|>;
    #L00013b. if s0 != [|v4|] then goto L00014a;
    #L00013c. call s1:= {|java.util.HashMap$Entry.equals(Ljava.lang.Object;)Z|}([|v7|],[|v2|]) @signature "java.util.HashMap$Entry.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00013d. if s1 == 0 then goto L00014a;
    #L00015a. s0:= [|v0|].<|java.util.HashMap.modCount|>;
    #L00015b. [|v0|].<|java.util.HashMap.modCount|>:= s0+1;
    #L00016a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00016b. [|v0|].<|java.util.HashMap.size|>:= s0-1;
    #L00017a. if [|v6|] != [|v7|] then goto L00018a;
    #L00019a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00019b. s0[[|v5|]]:= [|v8|];
    #L00019c. goto L00020a;
    #L00018a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00018b. [|v6|].<|java.util.HashMap$Entry.next|>:= [|v8|];
    #L00020a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00020b. call s0:= {|java.util.HashMap$Entry.recordRemoval(Ljava.util.HashMap;)V|}([|v7|],[|v0|]) @signature "java.util.HashMap$Entry.recordRemoval(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00021a. return [|v7|];
    #L00014a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00014b. [|v6|]:= [|v7|] @type java.lang.Object;
    #L00022a. [|v7|]:= [|v8|] @type java.lang.Object;
    #L00023a. goto L00010a;
    #L00011a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00011b. return [|v7|];
  }
  procedure (|void|) {|java.util.HashMap.clear()V|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.clear()V" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap.modCount|>;
    #L00000b. [|v0|].<|java.util.HashMap.modCount|>:= s0+1;
    #L00001a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00001b. call s1:= {|java.util.Arrays.fill([Ljava.lang.Object;Ljava.lang.Object;)V|}(s0,null) @signature "java.util.Arrays.fill([Ljava/lang/Object;Ljava/lang/Object;)V" @classDescriptor [|java.util.Arrays|] @type direct;
    #L00002a. [|v0|].<|java.util.HashMap.size|>:= 0;
    #L00003a. return @void;
  }
  procedure (|boolean|) {|java.util.HashMap.containsValue(Ljava.lang.Object;)Z|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.containsValue(Ljava/lang/Object;)Z" 
  {
    local dummy;
    s0;
    s1;
    [|v2|];
    [|v3|];
    [|v4|];


    #L00000a. if [|v1|] != null then goto L00001a;
    #L00002a. call s0:= {|java.util.HashMap.containsNullValue()Z|}([|v0|]) @signature "java.util.HashMap.containsNullValue()Z" @classDescriptor [|java.util.HashMap|] @type special;
    #L00002b. return s0;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001b. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00001c. [|v2|]:= s0 @type (|java.util.HashMap$Entry[]|);
    #L00003a. [|v3|]:= 0 @type (|int|);
    #L00004a. <@Frame (@Append, 2, `[(|java.util.HashMap$Entry[]|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004b. if [|v3|] <= [|v2|].length then goto L00005a;
    #L00006a. s0:= [|v2|][[|v3|]];
    #L00006b. [|v4|]:= s0 @type (|java.lang.Object|);
    #L00007a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00007b. if [|v4|] == null then goto L00008a;
    #L00009a. s0:= [|v4|].<|java.util.HashMap$Entry.value|>;
    #L00009b. call s1:= {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],s0) @signature "java.lang.Object.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.lang.Object|] @type virtual;
    #L00009c. if s1 == 0 then goto L00010a;
    #L00011a. return 1;
    #L00010a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00010b. s0:= [|v4|].<|java.util.HashMap$Entry.next|>;
    #L00010c. [|v4|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00010d. goto L00007a;
    #L00008a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00008b. [|v3|]:= [|v3|] + 1 @type (|int|);
    #L00008c. goto L00004a;
    #L00005a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00005b. return 0;
  }
  procedure (|boolean|) {|java.util.HashMap.containsNullValue()Z|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 4
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.containsNullValue()Z" 
  {
    local dummy;
    s0;
    [|v1|];
    [|v2|];
    [|v3|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00000b. [|v1|]:= s0 @type (|java.util.HashMap$Entry[]|);
    #L00001a. [|v2|]:= 0 @type (|int|);
    #L00002a. <@Frame (@Append, 2, `[(|java.util.HashMap$Entry[]|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002b. if [|v2|] <= [|v1|].length then goto L00003a;
    #L00004a. s0:= [|v1|][[|v2|]];
    #L00004b. [|v3|]:= s0 @type (|java.lang.Object|);
    #L00005a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00005b. if [|v3|] == null then goto L00006a;
    #L00007a. s0:= [|v3|].<|java.util.HashMap$Entry.value|>;
    #L00007b. if s0 != null then goto L00008a;
    #L00009a. return 1;
    #L00008a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00008b. s0:= [|v3|].<|java.util.HashMap$Entry.next|>;
    #L00008c. [|v3|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00008d. goto L00005a;
    #L00006a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006b. [|v2|]:= [|v2|] + 1 @type (|int|);
    #L00006c. goto L00002a;
    #L00003a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00003b. return 0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.clone()Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 3
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.clone()Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    s1;
    s2;
    s3;
    s4;
    s5;
    s6;
    [|v1|];
    [|v2|];


    #L00003a. [|v1|]:= null @type java.lang.Object;
    #L00000a. call s0:= {|java.util.AbstractMap.clone()Ljava.lang.Object;|}([|v0|]) @signature "java.util.AbstractMap.clone()Ljava/lang/Object;" @classDescriptor [|java.util.AbstractMap|] @type special;
    #L00000b. [|v1|]:= ((|java.util.HashMap|)) s0 @type (|java.util.HashMap|);
    #L00001a. goto L00004a;
    #L00002a. <@Frame (@Full, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00002b. [|v2|]:= "java/lang/CloneNotSupportedException" @type java.lang.Object;
    #L00004a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00004b. s0:= [|v1|].<|java.util.HashMap.table|>;
    #L00004c. s1:= +|java.util.HashMap.EMPTY_TABLE|+;
    #L00004d. if s0 == s1 then goto L00005a;
    #L00006a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00006b. s1:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00006c. call s2:= {|java.lang.Math.min(FF)F|}(1.0/s1,4.0) @signature "java.lang.Math.min(FF)F" @classDescriptor [|java.lang.Math|] @type direct;
    #L00006d. call s3:= {|java.lang.Math.min(FF)F|}(s0*s2,1.07374182E9) @signature "java.lang.Math.min(FF)F" @classDescriptor [|java.lang.Math|] @type direct;
    #L00006e. s4:= [|v0|].<|java.util.HashMap.table|>;
    #L00006f. call s5:= {|java.lang.Math.min(II)I|}(s3,s4.length) @signature "java.lang.Math.min(II)I" @classDescriptor [|java.lang.Math|] @type direct;
    #L00006g. call s6:= {|java.util.HashMap.inflateTable(I)V|}([|v1|],s5) @signature "java.util.HashMap.inflateTable(I)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00005a. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00005b. [|v1|].<|java.util.HashMap.entrySet|>:= null;
    #L00007a. [|v1|].<|java.util.HashMap.modCount|>:= 0;
    #L00008a. [|v1|].<|java.util.HashMap.size|>:= 0;
    #L00009a. call s0:= {|java.util.HashMap.init()V|}([|v1|]) @signature "java.util.HashMap.init()V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00010a. call s0:= {|java.util.HashMap.putAllForCreate(Ljava.util.Map;)V|}([|v1|],[|v0|]) @signature "java.util.HashMap.putAllForCreate(Ljava/util/Map;)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00011a. return [|v1|];
      catch (|java.lang.CloneNotSupportedException|) @[L00000a..L00001a] goto L00002a;
  }
  procedure (|void|) {|java.util.HashMap.addEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|], (|java.lang.Object|) [|v2|], (|java.lang.Object|) [|v3|], (|int|) [|v4|]) 
    @MaxLocals 5
    @MaxStack 5
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    s3;


    #L00000a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00000b. s1:= [|v0|].<|java.util.HashMap.threshold|>;
    #L00000c. if s0 > s1 then goto L00001a;
    #L00000d. s2:= [|v0|].<|java.util.HashMap.table|>;
    #L00000e. s3:= s2[[|v4|]];
    #L00000f. if null == s3 then goto L00001a;
    #L00002a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00002b. call s1:= {|java.util.HashMap.resize(I)V|}([|v0|],2*s0.length) @signature "java.util.HashMap.resize(I)V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00003a. if null == [|v2|] then goto L00004a;
    #L00003b. call s0:= {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v2|]) @signature "java.util.HashMap.hash(Ljava/lang/Object;)I" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00003c. goto L00005a;
    #L00004a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00005a. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00005b. [|v1|]:= 0 @type (|int|);
    #L00006a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00006b. call s1:= {|java.util.HashMap.indexFor(II)I|}([|v1|],s0.length) @signature "java.util.HashMap.indexFor(II)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00006c. [|v4|]:= s1 @type (|java.lang.Object|);
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001b. call s0:= {|java.util.HashMap.createEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|}([|v0|],[|v1|],[|v2|],[|v3|],[|v4|]) @signature "java.util.HashMap.createEntry(ILjava/lang/Object;Ljava/lang/Object;I)V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00007a. return @void;
  }
  procedure (|void|) {|java.util.HashMap.createEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|], (|java.lang.Object|) [|v2|], (|java.lang.Object|) [|v3|], (|int|) [|v4|]) 
    @MaxLocals 6
    @MaxStack 8
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.createEntry(ILjava/lang/Object;Ljava/lang/Object;I)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v5|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00000b. s1:= s0[[|v4|]];
    #L00000c. [|v5|]:= s1 @type (|java.lang.Object|);
    #L00001a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00001b. s1:= new (|java.util.HashMap$Entry|);
    #L00001c. call s2:= {|java.util.HashMap$Entry.<init>(ILjava.lang.Object;Ljava.lang.Object;Ljava.util.HashMap$Entry;)V|}(s1,[|v1|],[|v2|],[|v3|],[|v5|]) @signature "java.util.HashMap$Entry.<init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Entry;)V" @classDescriptor [|java.util.HashMap$Entry|] @type special;
    #L00001d. s0[[|v4|]]:= s1;
    #L00002a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00002b. [|v0|].<|java.util.HashMap.size|>:= s0+1;
    #L00003a. return @void;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap.newKeyIterator()Ljava.util.Iterator;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.newKeyIterator()Ljava/util/Iterator;" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= new (|java.util.HashMap$KeyIterator|);
    #L00000b. call s1:= {|java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @signature "java.util.HashMap$KeyIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" @classDescriptor [|java.util.HashMap$KeyIterator|] @type special;
    #L00000c. return s0;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap.newValueIterator()Ljava.util.Iterator;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.newValueIterator()Ljava/util/Iterator;" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= new (|java.util.HashMap$ValueIterator|);
    #L00000b. call s1:= {|java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @signature "java.util.HashMap$ValueIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" @classDescriptor [|java.util.HashMap$ValueIterator|] @type special;
    #L00000c. return s0;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap.newEntryIterator()Ljava.util.Iterator;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.newEntryIterator()Ljava/util/Iterator;" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= new (|java.util.HashMap$EntryIterator|);
    #L00000b. call s1:= {|java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @signature "java.util.HashMap$EntryIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" @classDescriptor [|java.util.HashMap$EntryIterator|] @type special;
    #L00000c. return s0;
  }
  procedure (|java.util.Set|) {|java.util.HashMap.keySet()Ljava.util.Set;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 5
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.keySet()Ljava/util/Set;" 
  {
    local dummy;
    s0;
    s1;
    [|v1|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.keySet|>;
    #L00000b. [|v1|]:= s0 @type (|java.util.Set|);
    #L00001a. if [|v1|] == null then goto L00002a;
    #L00001b. goto L00003a;
    #L00002a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002b. s0:= new (|java.util.HashMap$KeySet|);
    #L00002c. call s1:= {|java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @signature "java.util.HashMap$KeySet.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" @classDescriptor [|java.util.HashMap$KeySet|] @type special;
    #L00002d. [|v0|].<|java.util.HashMap.keySet|>:= s0;
    #L00003a. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003b. return s0;
  }
  procedure (|java.util.Collection|) {|java.util.HashMap.values()Ljava.util.Collection;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 5
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.values()Ljava/util/Collection;" 
  {
    local dummy;
    s0;
    s1;
    [|v1|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.values|>;
    #L00000b. [|v1|]:= s0 @type (|java.util.Collection|);
    #L00001a. if [|v1|] == null then goto L00002a;
    #L00001b. goto L00003a;
    #L00002a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002b. s0:= new (|java.util.HashMap$Values|);
    #L00002c. call s1:= {|java.util.HashMap$Values.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @signature "java.util.HashMap$Values.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" @classDescriptor [|java.util.HashMap$Values|] @type special;
    #L00002d. [|v0|].<|java.util.HashMap.values|>:= s0;
    #L00003a. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003b. return s0;
  }
  procedure (|java.util.Set|) {|java.util.HashMap.entrySet()Ljava.util.Set;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap.entrySet()Ljava/util/Set;" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap.entrySet0()Ljava.util.Set;|}([|v0|]) @signature "java.util.HashMap.entrySet0()Ljava/util/Set;" @classDescriptor [|java.util.HashMap|] @type special;
    #L00000b. return s0;
  }
  procedure (|java.util.Set|) {|java.util.HashMap.entrySet0()Ljava.util.Set;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 5
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.entrySet0()Ljava/util/Set;" 
  {
    local dummy;
    s0;
    s1;
    [|v1|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap.entrySet|>;
    #L00000b. [|v1|]:= s0 @type (|java.util.Set|);
    #L00001a. if [|v1|] == null then goto L00002a;
    #L00001b. goto L00003a;
    #L00002a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002b. s0:= new (|java.util.HashMap$EntrySet|);
    #L00002c. call s1:= {|java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @signature "java.util.HashMap$EntrySet.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" @classDescriptor [|java.util.HashMap$EntrySet|] @type special;
    #L00002d. [|v0|].<|java.util.HashMap.entrySet|>:= s0;
    #L00003a. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003b. return s0;
  }
  procedure (|void|) {|java.util.HashMap.writeObject(Ljava.io.ObjectOutputStream;)V|} ((|java.util.HashMap|) [|v0|], (|java.io.ObjectOutputStream|) [|v1|]) 
    @Throws [|java.io.IOException|]
    @MaxLocals 4
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.writeObject(Ljava/io/ObjectOutputStream;)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v2|];
    [|v3|];


    #L00000a. call s0:= {|java.io.ObjectOutputStream.defaultWriteObject()V|}([|v1|]) @signature "java.io.ObjectOutputStream.defaultWriteObject()V" @classDescriptor [|java.io.ObjectOutputStream|] @type virtual;
    #L00001a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00001b. s1:= +|java.util.HashMap.EMPTY_TABLE|+;
    #L00001c. if s0 != s1 then goto L00002a;
    #L00003a. s0:= [|v0|].<|java.util.HashMap.threshold|>;
    #L00003b. call s1:= {|java.util.HashMap.roundUpToPowerOf2(I)I|}(s0) @signature "java.util.HashMap.roundUpToPowerOf2(I)I" @classDescriptor [|java.util.HashMap|] @type direct;
    #L00003c. call s2:= {|java.io.ObjectOutputStream.writeInt(I)V|}([|v1|],s1) @signature "java.io.ObjectOutputStream.writeInt(I)V" @classDescriptor [|java.io.ObjectOutputStream|] @type virtual;
    #L00003d. goto L00004a;
    #L00002a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002b. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00002c. call s1:= {|java.io.ObjectOutputStream.writeInt(I)V|}([|v1|],s0.length) @signature "java.io.ObjectOutputStream.writeInt(I)V" @classDescriptor [|java.io.ObjectOutputStream|] @type virtual;
    #L00004a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004b. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00004c. call s1:= {|java.io.ObjectOutputStream.writeInt(I)V|}([|v1|],s0) @signature "java.io.ObjectOutputStream.writeInt(I)V" @classDescriptor [|java.io.ObjectOutputStream|] @type virtual;
    #L00005a. s0:= [|v0|].<|java.util.HashMap.size|>;
    #L00005b. if s0 >= 0 then goto L00006a;
    #L00007a. call s0:= {|java.util.HashMap.entrySet0()Ljava.util.Set;|}([|v0|]) @signature "java.util.HashMap.entrySet0()Ljava/util/Set;" @classDescriptor [|java.util.HashMap|] @type special;
    #L00007b. call s1:= {|java.util.Set.iterator()Ljava.util.Iterator;|}(s0) @signature "java.util.Set.iterator()Ljava/util/Iterator;" @classDescriptor [|java.util.Set|] @type interface;
    #L00007c. [|v2|]:= s1 @type (|java.lang.Object|);
    #L00008a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00008b. call s0:= {|java.util.Iterator.hasNext()Z|}([|v2|]) @signature "java.util.Iterator.hasNext()Z" @classDescriptor [|java.util.Iterator|] @type interface;
    #L00008c. if s0 == 0 then goto L00006a;
    #L00008d. call s1:= {|java.util.Iterator.next()Ljava.lang.Object;|}([|v2|]) @signature "java.util.Iterator.next()Ljava/lang/Object;" @classDescriptor [|java.util.Iterator|] @type interface;
    #L00008e. [|v3|]:= ((|java.util.Map$Entry|)) s1 @type (|java.util.Map$Entry|);
    #L00009a. call s0:= {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v3|]) @signature "java.util.Map$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00009b. call s1:= {|java.io.ObjectOutputStream.writeObject(Ljava.lang.Object;)V|}([|v1|],s0) @signature "java.io.ObjectOutputStream.writeObject(Ljava/lang/Object;)V" @classDescriptor [|java.io.ObjectOutputStream|] @type virtual;
    #L00010a. call s0:= {|java.util.Map$Entry.getValue()Ljava.lang.Object;|}([|v3|]) @signature "java.util.Map$Entry.getValue()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00010b. call s1:= {|java.io.ObjectOutputStream.writeObject(Ljava.lang.Object;)V|}([|v1|],s0) @signature "java.io.ObjectOutputStream.writeObject(Ljava/lang/Object;)V" @classDescriptor [|java.io.ObjectOutputStream|] @type virtual;
    #L00011a. goto L00008a;
    #L00006a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006b. return @void;
  }
  procedure (|void|) {|java.util.HashMap.readObject(Ljava.io.ObjectInputStream;)V|} ((|java.util.HashMap|) [|v0|], (|java.io.ObjectInputStream|) [|v1|]) 
    @Throws [|java.io.IOException|],[|java.lang.ClassNotFoundException|]
    @MaxLocals 7
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Signature "java.util.HashMap.readObject(Ljava/io/ObjectInputStream;)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    s3;
    s4;
    s5;
    s6;
    s7;
    [|v2|];
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];


    #L00000a. call s0:= {|java.io.ObjectInputStream.defaultReadObject()V|}([|v1|]) @signature "java.io.ObjectInputStream.defaultReadObject()V" @classDescriptor [|java.io.ObjectInputStream|] @type virtual;
    #L00001a. s0:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00001b. s1:= fcmpg(0.0,s0);
    #L00001c. if s1 >= 0 then goto L00002a;
    #L00001d. s2:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00001e. call s3:= {|java.lang.Float.isNaN(F)Z|}(s2) @signature "java.lang.Float.isNaN(F)Z" @classDescriptor [|java.lang.Float|] @type direct;
    #L00001f. if s3 == 0 then goto L00003a;
    #L00002a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00002b. s0:= new (|java.io.InvalidObjectException|);
    #L00002c. s1:= new (|java.lang.StringBuilder|);
    #L00002d. call s2:= {|java.lang.StringBuilder.<init>()V|}(s1) @signature "java.lang.StringBuilder.<init>()V" @classDescriptor [|java.lang.StringBuilder|] @type special;
    #L00002e. call s3:= {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s1,"Illegal load factor: ") @signature "java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00002f. s4:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00002g. call s5:= {|java.lang.StringBuilder.append(F)Ljava.lang.StringBuilder;|}(s3,s4) @signature "java.lang.StringBuilder.append(F)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00002h. call s6:= {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s5) @signature "java.lang.StringBuilder.toString()Ljava/lang/String;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00002i. call s7:= {|java.io.InvalidObjectException.<init>(Ljava.lang.String;)V|}(s0,s6) @signature "java.io.InvalidObjectException.<init>(Ljava/lang/String;)V" @classDescriptor [|java.io.InvalidObjectException|] @type special;
    #L00002j. throw s0;
    #L00003a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00003b. s0:= +|java.util.HashMap.EMPTY_TABLE|+;
    #L00003c. [|v0|].<|java.util.HashMap.table|>:= ((|[Ljava.util.HashMap$Entry;|)) s0;
    #L00004a. call s0:= {|java.io.ObjectInputStream.readInt()I|}([|v1|]) @signature "java.io.ObjectInputStream.readInt()I" @classDescriptor [|java.io.ObjectInputStream|] @type virtual;
    #L00005a. call s0:= {|java.io.ObjectInputStream.readInt()I|}([|v1|]) @signature "java.io.ObjectInputStream.readInt()I" @classDescriptor [|java.io.ObjectInputStream|] @type virtual;
    #L00005b. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00006a. if [|v2|] <= 0 then goto L00007a;
    #L00008a. s0:= new (|java.io.InvalidObjectException|);
    #L00008b. s1:= new (|java.lang.StringBuilder|);
    #L00008c. call s2:= {|java.lang.StringBuilder.<init>()V|}(s1) @signature "java.lang.StringBuilder.<init>()V" @classDescriptor [|java.lang.StringBuilder|] @type special;
    #L00008d. call s3:= {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s1,"Illegal mappings count: ") @signature "java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00008e. call s4:= {|java.lang.StringBuilder.append(I)Ljava.lang.StringBuilder;|}(s3,[|v2|]) @signature "java.lang.StringBuilder.append(I)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00008f. call s5:= {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s4) @signature "java.lang.StringBuilder.toString()Ljava/lang/String;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00008g. call s6:= {|java.io.InvalidObjectException.<init>(Ljava.lang.String;)V|}(s0,s5) @signature "java.io.InvalidObjectException.<init>(Ljava/lang/String;)V" @classDescriptor [|java.io.InvalidObjectException|] @type special;
    #L00008h. throw s0;
    #L00007a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00007b. s0:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00007c. call s1:= {|java.lang.Math.min(FF)F|}(1.0/s0,4.0) @signature "java.lang.Math.min(FF)F" @classDescriptor [|java.lang.Math|] @type direct;
    #L00007d. call s2:= {|java.lang.Math.min(FF)F|}([|v2|]*s1,1.07374182E9) @signature "java.lang.Math.min(FF)F" @classDescriptor [|java.lang.Math|] @type direct;
    #L00007e. [|v3|]:= s2 @type (|int|);
    #L00009a. if [|v2|] >= 0 then goto L00010a;
    #L00011a. call s0:= {|java.util.HashMap.inflateTable(I)V|}([|v0|],[|v3|]) @signature "java.util.HashMap.inflateTable(I)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00011b. goto L00012a;
    #L00010a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00010b. [|v0|].<|java.util.HashMap.threshold|>:= [|v3|];
    #L00012a. <@Frame (@Same, 0, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00012b. call s0:= {|java.util.HashMap.init()V|}([|v0|]) @signature "java.util.HashMap.init()V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00013a. [|v4|]:= 0 @type (|int|);
    #L00014a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00014b. if [|v4|] <= [|v2|] then goto L00015a;
    #L00016a. call s0:= {|java.io.ObjectInputStream.readObject()Ljava.lang.Object;|}([|v1|]) @signature "java.io.ObjectInputStream.readObject()Ljava/lang/Object;" @classDescriptor [|java.io.ObjectInputStream|] @type virtual;
    #L00016b. [|v5|]:= s0 @type (|java.lang.Object|);
    #L00017a. call s0:= {|java.io.ObjectInputStream.readObject()Ljava.lang.Object;|}([|v1|]) @signature "java.io.ObjectInputStream.readObject()Ljava/lang/Object;" @classDescriptor [|java.io.ObjectInputStream|] @type virtual;
    #L00017b. [|v6|]:= s0 @type (|java.lang.Object|);
    #L00018a. call s0:= {|java.util.HashMap.putForCreate(Ljava.lang.Object;Ljava.lang.Object;)V|}([|v0|],[|v5|],[|v6|]) @signature "java.util.HashMap.putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V" @classDescriptor [|java.util.HashMap|] @type special;
    #L00019a. [|v4|]:= [|v4|] + 1 @type (|int|);
    #L00019b. goto L00014a;
    #L00015a. <@Frame (@Chop, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00015b. return @void;
  }
  procedure (|int|) {|java.util.HashMap.capacity()I|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.capacity()I" 
  {
    local dummy;
    s0;


    #L00000a. s0:= [|v0|].<|java.util.HashMap.table|>;
    #L00000b. return s0.length;
  }
  procedure (|float|) {|java.util.HashMap.loadFactor()F|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access ()
    @Signature "java.util.HashMap.loadFactor()F" 
  {
    local dummy;
    s0;


    #L00000a. s0:= [|v0|].<|java.util.HashMap.loadFactor|>;
    #L00000b. return s0;
  }
  procedure (|void|) {|java.util.HashMap.<clinit>()V|} () 
    @MaxLocals 0
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access (STATIC)
    @Signature "java.util.HashMap.<clinit>()V" 
  {
    local dummy;
    s0;


    #L00000a. s0:= new (|java.util.HashMap$Entry|)[0];
    #L00000b. +|java.util.HashMap.EMPTY_TABLE|+:= s0;
    #L00000c. return @void;
  }

record (|java.util.HashMap$1|)
    @OuterClass java/util/HashMap
    @source "HashMap.java"
    @type class
    @AccessFlag (SYNTHETIC)
    @InnerClass (
      @Name (|java.util.HashMap$1|), 
      @OuterName (|java.util.HashMap|), 
      @AccessFlag (STATIC,SYNTHETIC)
     ) 
  extends 
    (|java.lang.Object|) 
{
}



record (|java.util.HashMap$EntrySet|)
    @source "HashMap.java"
    @type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.AbstractSet|) 
{
  (|java.util.HashMap|) <|HashMap$EntrySet.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$EntrySet|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Signature "java.util.HashMap$EntrySet.<init>(Ljava/util/HashMap;)V" 
  {
    local dummy;
    s0;


    #L00000a. [|v0|].<|java.util.HashMap$EntrySet.this$0|>:= [|v1|];
    #L00000b. call s0:= {|java.util.AbstractSet.<init>()V|}([|v0|]) @signature "java.util.AbstractSet.<init>()V" @classDescriptor [|java.util.AbstractSet|] @type special;
    #L00000c. return @void;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap$EntrySet.iterator()Ljava.util.Iterator;|} ((|java.util.HashMap$EntrySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$EntrySet.iterator()Ljava/util/Iterator;" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$EntrySet.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.newEntryIterator()Ljava.util.Iterator;|}(s0) @signature "java.util.HashMap.newEntryIterator()Ljava/util/Iterator;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000c. return s1;
  }
  procedure (|boolean|) {|java.util.HashMap$EntrySet.contains(Ljava.lang.Object;)Z|} ((|java.util.HashMap$EntrySet|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 4
    @MaxStack 2
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$EntrySet.contains(Ljava/lang/Object;)Z" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v2|];
    [|v3|];


    #L00000a. s0:= instanceof @varname [|v1|] @type "(|java.util.Map$Entry|)";
    #L00000b. if s0 != 0 then goto L00001a;
    #L00002a. return 0;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001b. [|v2|]:= ((|java.util.Map$Entry|)) [|v1|] @type (|java.util.Map$Entry|);
    #L00003a. s0:= [|v0|].<|java.util.HashMap$EntrySet.this$0|>;
    #L00003b. call s1:= {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v2|]) @signature "java.util.Map$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00003c. call s2:= {|java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}(s0,s1) @signature "java.util.HashMap.getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00003d. [|v3|]:= s2 @type (|java.lang.Object|);
    #L00004a. if [|v3|] == null then goto L00005a;
    #L00004b. call s0:= {|java.util.HashMap$Entry.equals(Ljava.lang.Object;)Z|}([|v3|],[|v2|]) @signature "java.util.HashMap$Entry.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00004c. if s0 == 0 then goto L00005a;
    #L00004d. goto L00006a;
    #L00005a. <@Frame (@Append, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006a. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00006b. return 0;
  }
  procedure (|boolean|) {|java.util.HashMap$EntrySet.remove(Ljava.lang.Object;)Z|} ((|java.util.HashMap$EntrySet|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$EntrySet.remove(Ljava/lang/Object;)Z" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$EntrySet.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.removeMapping(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}(s0,[|v1|]) @signature "java.util.HashMap.removeMapping(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000c. if s1 == null then goto L00001a;
    #L00000d. goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002a. <@Frame (@Same1, 0, `[(|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002b. return 0;
  }
  procedure (|int|) {|java.util.HashMap$EntrySet.size()I|} ((|java.util.HashMap$EntrySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$EntrySet.size()I" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$EntrySet.this$0|>;
    #L00000b. s1:= s0.<|java.util.HashMap.size|>;
    #L00000c. return s1;
  }
  procedure (|void|) {|java.util.HashMap$EntrySet.clear()V|} ((|java.util.HashMap$EntrySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$EntrySet.clear()V" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$EntrySet.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.clear()V|}(s0) @signature "java.util.HashMap.clear()V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00001a. return @void;
  }
  procedure (|void|) {|java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$EntrySet|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Signature "java.util.HashMap$EntrySet.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$EntrySet.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$EntrySet|] @type special;
    #L00000b. return @void;
  }

record (|java.util.HashMap$Values|)
    @source "HashMap.java"
    @type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Values|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Values, 
      @AccessFlag (PRIVATE,FINAL)
     ) 
  extends 
    (|java.util.AbstractCollection|) 
{
  (|java.util.HashMap|) <|HashMap$Values.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$Values.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$Values|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$Values|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Signature "java.util.HashMap$Values.<init>(Ljava/util/HashMap;)V" 
  {
    local dummy;
    s0;


    #L00000a. [|v0|].<|java.util.HashMap$Values.this$0|>:= [|v1|];
    #L00000b. call s0:= {|java.util.AbstractCollection.<init>()V|}([|v0|]) @signature "java.util.AbstractCollection.<init>()V" @classDescriptor [|java.util.AbstractCollection|] @type special;
    #L00000c. return @void;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap$Values.iterator()Ljava.util.Iterator;|} ((|java.util.HashMap$Values|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Values|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$Values.iterator()Ljava/util/Iterator;" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$Values.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.newValueIterator()Ljava.util.Iterator;|}(s0) @signature "java.util.HashMap.newValueIterator()Ljava/util/Iterator;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000c. return s1;
  }
  procedure (|int|) {|java.util.HashMap$Values.size()I|} ((|java.util.HashMap$Values|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Values|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$Values.size()I" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$Values.this$0|>;
    #L00000b. s1:= s0.<|java.util.HashMap.size|>;
    #L00000c. return s1;
  }
  procedure (|boolean|) {|java.util.HashMap$Values.contains(Ljava.lang.Object;)Z|} ((|java.util.HashMap$Values|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$Values|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$Values.contains(Ljava/lang/Object;)Z" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$Values.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.containsValue(Ljava.lang.Object;)Z|}(s0,[|v1|]) @signature "java.util.HashMap.containsValue(Ljava/lang/Object;)Z" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000c. return s1;
  }
  procedure (|void|) {|java.util.HashMap$Values.clear()V|} ((|java.util.HashMap$Values|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Values|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$Values.clear()V" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$Values.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.clear()V|}(s0) @signature "java.util.HashMap.clear()V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00001a. return @void;
  }
  procedure (|void|) {|java.util.HashMap$Values.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$Values|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$Values|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Signature "java.util.HashMap$Values.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap$Values.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$Values.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$Values|] @type special;
    #L00000b. return @void;
  }

record (|java.util.HashMap$KeySet|)
    @source "HashMap.java"
    @type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.AbstractSet|) 
{
  (|java.util.HashMap|) <|HashMap$KeySet.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$KeySet|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Signature "java.util.HashMap$KeySet.<init>(Ljava/util/HashMap;)V" 
  {
    local dummy;
    s0;


    #L00000a. [|v0|].<|java.util.HashMap$KeySet.this$0|>:= [|v1|];
    #L00000b. call s0:= {|java.util.AbstractSet.<init>()V|}([|v0|]) @signature "java.util.AbstractSet.<init>()V" @classDescriptor [|java.util.AbstractSet|] @type special;
    #L00000c. return @void;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap$KeySet.iterator()Ljava.util.Iterator;|} ((|java.util.HashMap$KeySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$KeySet.iterator()Ljava/util/Iterator;" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$KeySet.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.newKeyIterator()Ljava.util.Iterator;|}(s0) @signature "java.util.HashMap.newKeyIterator()Ljava/util/Iterator;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000c. return s1;
  }
  procedure (|int|) {|java.util.HashMap$KeySet.size()I|} ((|java.util.HashMap$KeySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$KeySet.size()I" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$KeySet.this$0|>;
    #L00000b. s1:= s0.<|java.util.HashMap.size|>;
    #L00000c. return s1;
  }
  procedure (|boolean|) {|java.util.HashMap$KeySet.contains(Ljava.lang.Object;)Z|} ((|java.util.HashMap$KeySet|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$KeySet.contains(Ljava/lang/Object;)Z" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$KeySet.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.containsKey(Ljava.lang.Object;)Z|}(s0,[|v1|]) @signature "java.util.HashMap.containsKey(Ljava/lang/Object;)Z" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000c. return s1;
  }
  procedure (|boolean|) {|java.util.HashMap$KeySet.remove(Ljava.lang.Object;)Z|} ((|java.util.HashMap$KeySet|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$KeySet.remove(Ljava/lang/Object;)Z" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$KeySet.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}(s0,[|v1|]) @signature "java.util.HashMap.removeEntryForKey(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00000c. if s1 == null then goto L00001a;
    #L00000d. goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002a. <@Frame (@Same1, 0, `[(|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002b. return 0;
  }
  procedure (|void|) {|java.util.HashMap$KeySet.clear()V|} ((|java.util.HashMap$KeySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$KeySet.clear()V" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$KeySet.this$0|>;
    #L00000b. call s1:= {|java.util.HashMap.clear()V|}(s0) @signature "java.util.HashMap.clear()V" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00001a. return @void;
  }
  procedure (|void|) {|java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$KeySet|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$KeySet|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Signature "java.util.HashMap$KeySet.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$KeySet.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$KeySet|] @type special;
    #L00000b. return @void;
  }

record (|java.util.HashMap$EntryIterator|)
    @source "HashMap.java"
    @type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.HashMap$HashIterator|) 
{
  (|java.util.HashMap|) <|HashMap$EntryIterator.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$EntryIterator|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$EntryIterator|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Signature "java.util.HashMap$EntryIterator.<init>(Ljava/util/HashMap;)V" 
  {
    local dummy;
    s0;


    #L00000a. [|v0|].<|java.util.HashMap$EntryIterator.this$0|>:= [|v1|];
    #L00000b. call s0:= {|java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$HashIterator.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$HashIterator|] @type special;
    #L00000c. return @void;
  }
  procedure (|java.util.Map$Entry|) {|java.util.HashMap$EntryIterator.next()Ljava.util.Map$Entry;|} ((|java.util.HashMap$EntryIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$EntryIterator|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$EntryIterator.next()Ljava/util/Map$Entry;" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap$EntryIterator.nextEntry()Ljava.util.HashMap$Entry;|}([|v0|]) @signature "java.util.HashMap$EntryIterator.nextEntry()Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap$EntryIterator|] @type virtual;
    #L00000b. return s0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$EntryIterator.next()Ljava.lang.Object;|} ((|java.util.HashMap$EntryIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$EntryIterator|)
    @Access (PUBLIC,SYNTHETIC,VOLATILE)
    @Signature "java.util.HashMap$EntryIterator.next()Ljava/lang/Object;" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap$EntryIterator.next()Ljava.util.Map$Entry;|}([|v0|]) @signature "java.util.HashMap$EntryIterator.next()Ljava/util/Map$Entry;" @classDescriptor [|java.util.HashMap$EntryIterator|] @type virtual;
    #L00000b. return s0;
  }
  procedure (|void|) {|java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$EntryIterator|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$EntryIterator|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Signature "java.util.HashMap$EntryIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$EntryIterator.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$EntryIterator|] @type special;
    #L00000b. return @void;
  }

record (|java.util.HashMap$KeyIterator|)
    @source "HashMap.java"
    @type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.HashMap$HashIterator|) 
{
  (|java.util.HashMap|) <|HashMap$KeyIterator.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$KeyIterator|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$KeyIterator|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Signature "java.util.HashMap$KeyIterator.<init>(Ljava/util/HashMap;)V" 
  {
    local dummy;
    s0;


    #L00000a. [|v0|].<|java.util.HashMap$KeyIterator.this$0|>:= [|v1|];
    #L00000b. call s0:= {|java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$HashIterator.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$HashIterator|] @type special;
    #L00000c. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$KeyIterator.next()Ljava.lang.Object;|} ((|java.util.HashMap$KeyIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$KeyIterator|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$KeyIterator.next()Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. call s0:= {|java.util.HashMap$KeyIterator.nextEntry()Ljava.util.HashMap$Entry;|}([|v0|]) @signature "java.util.HashMap$KeyIterator.nextEntry()Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap$KeyIterator|] @type virtual;
    #L00000b. call s1:= {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|}(s0) @signature "java.util.HashMap$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00000c. return s1;
  }
  procedure (|void|) {|java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$KeyIterator|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$KeyIterator|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Signature "java.util.HashMap$KeyIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$KeyIterator.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$KeyIterator|] @type special;
    #L00000b. return @void;
  }

record (|java.util.HashMap$ValueIterator|)
    @source "HashMap.java"
    @type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.HashMap$HashIterator|) 
{
  (|java.util.HashMap|) <|HashMap$ValueIterator.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$ValueIterator|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$ValueIterator|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Signature "java.util.HashMap$ValueIterator.<init>(Ljava/util/HashMap;)V" 
  {
    local dummy;
    s0;


    #L00000a. [|v0|].<|java.util.HashMap$ValueIterator.this$0|>:= [|v1|];
    #L00000b. call s0:= {|java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$HashIterator.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$HashIterator|] @type special;
    #L00000c. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$ValueIterator.next()Ljava.lang.Object;|} ((|java.util.HashMap$ValueIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$ValueIterator|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$ValueIterator.next()Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    s1;


    #L00000a. call s0:= {|java.util.HashMap$ValueIterator.nextEntry()Ljava.util.HashMap$Entry;|}([|v0|]) @signature "java.util.HashMap$ValueIterator.nextEntry()Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap$ValueIterator|] @type virtual;
    #L00000b. s1:= s0.<|java.util.HashMap$Entry.value|>;
    #L00000c. return s1;
  }
  procedure (|void|) {|java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$ValueIterator|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$ValueIterator|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Signature "java.util.HashMap$ValueIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @signature "java.util.HashMap$ValueIterator.<init>(Ljava/util/HashMap;)V" @classDescriptor [|java.util.HashMap$ValueIterator|] @type special;
    #L00000b. return @void;
  }

record (|java.util.HashMap$HashIterator|)
    @source "HashMap.java"
    @type class
    @AccessFlag ()
    @InnerClass (
      @Name (|java.util.HashMap$HashIterator|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName HashIterator, 
      @AccessFlag (PRIVATE)
     ) 
  extends 
    (|java.lang.Object|) 
{
  (|java.util.HashMap$Entry|) <|HashMap$HashIterator.next|> @AccessFlag ();
  (|int|) <|HashMap$HashIterator.expectedModCount|> @AccessFlag ();
  (|int|) <|HashMap$HashIterator.index|> @AccessFlag ();
  (|java.util.HashMap$Entry|) <|HashMap$HashIterator.current|> @AccessFlag ();
  (|java.util.HashMap|) <|HashMap$HashIterator.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$HashIterator|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 6
    @Owner (|java.util.HashMap$HashIterator|)
    @Access (CONSTRUCTOR)
    @Signature "java.util.HashMap$HashIterator.<init>(Ljava/util/HashMap;)V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v2|];


    #L00000a. [|v0|].<|java.util.HashMap$HashIterator.this$0|>:= [|v1|];
    #L00000b. call s0:= {|java.lang.Object.<init>()V|}([|v0|]) @signature "java.lang.Object.<init>()V" @classDescriptor [|java.lang.Object|] @type special;
    #L00001a. s0:= [|v1|].<|java.util.HashMap.modCount|>;
    #L00001b. [|v0|].<|java.util.HashMap$HashIterator.expectedModCount|>:= s0;
    #L00002a. s0:= [|v1|].<|java.util.HashMap.size|>;
    #L00002b. if s0 >= 0 then goto L00003a;
    #L00004a. s0:= [|v1|].<|java.util.HashMap.table|>;
    #L00004b. [|v2|]:= s0 @type (|java.util.HashMap$Entry[]|);
    #L00005a. <@Frame (@Full, 3, `[(|java.lang.Object|), (|java.lang.Object|), (|java.util.HashMap$Entry[]|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00005b. s0:= [|v0|].<|java.util.HashMap$HashIterator.index|>;
    #L00005c. if s0 <= [|v2|].length then goto L00003a;
    #L00005d. s1:= [|v0|].<|java.util.HashMap$HashIterator.index|>;
    #L00005e. [|v0|].<|java.util.HashMap$HashIterator.index|>:= s1+1;
    #L00005f. s2:= [|v2|][s1];
    #L00005g. [|v0|].<|java.util.HashMap$HashIterator.next|>:= s2;
    #L00005h. if s2 != null then goto L00003a;
    #L00006a. goto L00005a;
    #L00003a. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|java.util.HashMap$Entry[]|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003b. return @void;
  }
  procedure (|boolean|) {|java.util.HashMap$HashIterator.hasNext()Z|} ((|java.util.HashMap$HashIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$HashIterator|)
    @Access (PUBLIC,FINAL)
    @Signature "java.util.HashMap$HashIterator.hasNext()Z" 
  {
    local dummy;
    s0;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$HashIterator.next|>;
    #L00000b. if s0 == null then goto L00001a;
    #L00000c. goto L00002a;
    #L00001a. <@Frame (@Same, 0, `[(|top|)], 0, `[(|top|)])>
    #L00002a. <@Frame (@Same1, 0, `[(|top|)], 1, `[(|int|)])>
    #L00002b. return 0;
  }
  procedure (|java.util.HashMap$Entry|) {|java.util.HashMap$HashIterator.nextEntry()Ljava.util.HashMap$Entry;|} ((|java.util.HashMap$HashIterator|) [|v0|]) 
    @MaxLocals 3
    @MaxStack 6
    @Owner (|java.util.HashMap$HashIterator|)
    @Access (FINAL)
    @Signature "java.util.HashMap$HashIterator.nextEntry()Ljava/util/HashMap$Entry;" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v1|];
    [|v2|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap$HashIterator.this$0|>;
    #L00000b. s1:= s0.<|java.util.HashMap.modCount|>;
    #L00000c. s2:= [|v0|].<|java.util.HashMap$HashIterator.expectedModCount|>;
    #L00000d. if s1 == s2 then goto L00001a;
    #L00002a. s0:= new (|java.util.ConcurrentModificationException|);
    #L00002b. call s1:= {|java.util.ConcurrentModificationException.<init>()V|}(s0) @signature "java.util.ConcurrentModificationException.<init>()V" @classDescriptor [|java.util.ConcurrentModificationException|] @type special;
    #L00002c. throw s0;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001b. s0:= [|v0|].<|java.util.HashMap$HashIterator.next|>;
    #L00001c. [|v1|]:= s0 @type (|java.util.HashMap$Entry|);
    #L00003a. if [|v1|] != null then goto L00004a;
    #L00005a. s0:= new (|java.util.NoSuchElementException|);
    #L00005b. call s1:= {|java.util.NoSuchElementException.<init>()V|}(s0) @signature "java.util.NoSuchElementException.<init>()V" @classDescriptor [|java.util.NoSuchElementException|] @type special;
    #L00005c. throw s0;
    #L00004a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00004b. s0:= [|v1|].<|java.util.HashMap$Entry.next|>;
    #L00004c. [|v0|].<|java.util.HashMap$HashIterator.next|>:= s0;
    #L00004d. if s0 != null then goto L00006a;
    #L00007a. s0:= [|v0|].<|java.util.HashMap$HashIterator.this$0|>;
    #L00007b. s1:= s0.<|java.util.HashMap.table|>;
    #L00007c. [|v2|]:= s1 @type (|java.util.HashMap$Entry[]|);
    #L00008a. <@Frame (@Append, 1, `[(|java.util.HashMap$Entry[]|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00008b. s0:= [|v0|].<|java.util.HashMap$HashIterator.index|>;
    #L00008c. if s0 <= [|v2|].length then goto L00006a;
    #L00008d. s1:= [|v0|].<|java.util.HashMap$HashIterator.index|>;
    #L00008e. [|v0|].<|java.util.HashMap$HashIterator.index|>:= s1+1;
    #L00008f. s2:= [|v2|][s1];
    #L00008g. [|v0|].<|java.util.HashMap$HashIterator.next|>:= s2;
    #L00008h. if s2 != null then goto L00006a;
    #L00009a. goto L00008a;
    #L00006a. <@Frame (@Chop, 1, `[(|java.util.HashMap$Entry[]|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00006b. [|v0|].<|java.util.HashMap$HashIterator.current|>:= [|v1|];
    #L00010a. return [|v1|];
  }
  procedure (|void|) {|java.util.HashMap$HashIterator.remove()V|} ((|java.util.HashMap$HashIterator|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$HashIterator|)
    @Access (PUBLIC)
    @Signature "java.util.HashMap$HashIterator.remove()V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v1|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap$HashIterator.current|>;
    #L00000b. if s0 != null then goto L00001a;
    #L00002a. s0:= new (|java.lang.IllegalStateException|);
    #L00002b. call s1:= {|java.lang.IllegalStateException.<init>()V|}(s0) @signature "java.lang.IllegalStateException.<init>()V" @classDescriptor [|java.lang.IllegalStateException|] @type special;
    #L00002c. throw s0;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001b. s0:= [|v0|].<|java.util.HashMap$HashIterator.this$0|>;
    #L00001c. s1:= s0.<|java.util.HashMap.modCount|>;
    #L00001d. s2:= [|v0|].<|java.util.HashMap$HashIterator.expectedModCount|>;
    #L00001e. if s1 == s2 then goto L00003a;
    #L00004a. s0:= new (|java.util.ConcurrentModificationException|);
    #L00004b. call s1:= {|java.util.ConcurrentModificationException.<init>()V|}(s0) @signature "java.util.ConcurrentModificationException.<init>()V" @classDescriptor [|java.util.ConcurrentModificationException|] @type special;
    #L00004c. throw s0;
    #L00003a. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00003b. s0:= [|v0|].<|java.util.HashMap$HashIterator.current|>;
    #L00003c. s1:= s0.<|java.util.HashMap$Entry.key|>;
    #L00003d. [|v1|]:= s1 @type (|java.lang.Object|);
    #L00005a. [|v0|].<|java.util.HashMap$HashIterator.current|>:= null;
    #L00006a. s0:= [|v0|].<|java.util.HashMap$HashIterator.this$0|>;
    #L00006b. call s1:= {|java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}(s0,[|v1|]) @signature "java.util.HashMap.removeEntryForKey(Ljava/lang/Object;)Ljava/util/HashMap$Entry;" @classDescriptor [|java.util.HashMap|] @type virtual;
    #L00007a. s0:= [|v0|].<|java.util.HashMap$HashIterator.this$0|>;
    #L00007b. s1:= s0.<|java.util.HashMap.modCount|>;
    #L00007c. [|v0|].<|java.util.HashMap$HashIterator.expectedModCount|>:= s1;
    #L00008a. return @void;
  }

record (|java.util.HashMap$Entry|)
    @source "HashMap.java"
    @type class
    @AccessFlag ()
    @InnerClass (
      @Name (|java.util.Map$Entry|), 
      @OuterName (|java.util.Map|), 
      @InnerName Entry, 
      @AccessFlag (PUBLIC,INTERFACE,STATIC)
     ) 
  extends 
    (|java.lang.Object|) 
{
  (|java.lang.Object|) <|HashMap$Entry.key|> @AccessFlag (FINAL);
  (|java.lang.Object|) <|HashMap$Entry.value|> @AccessFlag ();
  (|java.util.HashMap$Entry|) <|HashMap$Entry.next|> @AccessFlag ();
  (|int|) <|HashMap$Entry.hash|> @AccessFlag ();
}

  procedure (|void|) {|java.util.HashMap$Entry.<init>(ILjava.lang.Object;Ljava.lang.Object;Ljava.util.HashMap$Entry;)V|} ((|java.util.HashMap$Entry|) [|v0|], (|int|) [|v1|], (|java.lang.Object|) [|v2|], (|java.lang.Object|) [|v3|], (|java.util.HashMap$Entry|) [|v4|]) 
    @MaxLocals 5
    @MaxStack 2
    @Owner (|java.util.HashMap$Entry|)
    @Access (CONSTRUCTOR)
    @Signature "java.util.HashMap$Entry.<init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Entry;)V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.lang.Object.<init>()V|}([|v0|]) @signature "java.lang.Object.<init>()V" @classDescriptor [|java.lang.Object|] @type special;
    #L00001a. [|v0|].<|java.util.HashMap$Entry.value|>:= [|v3|];
    #L00002a. [|v0|].<|java.util.HashMap$Entry.next|>:= [|v4|];
    #L00003a. [|v0|].<|java.util.HashMap$Entry.key|>:= [|v2|];
    #L00004a. [|v0|].<|java.util.HashMap$Entry.hash|>:= [|v1|];
    #L00005a. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|} ((|java.util.HashMap$Entry|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Signature "java.util.HashMap$Entry.getKey()Ljava/lang/Object;" 
  {
    local dummy;
    s0;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$Entry.key|>;
    #L00000b. return s0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|} ((|java.util.HashMap$Entry|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Signature "java.util.HashMap$Entry.getValue()Ljava/lang/Object;" 
  {
    local dummy;
    s0;


    #L00000a. s0:= [|v0|].<|java.util.HashMap$Entry.value|>;
    #L00000b. return s0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$Entry.setValue(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap$Entry|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Signature "java.util.HashMap$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;" 
  {
    local dummy;
    s0;
    [|v2|];


    #L00000a. s0:= [|v0|].<|java.util.HashMap$Entry.value|>;
    #L00000b. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00001a. [|v0|].<|java.util.HashMap$Entry.value|>:= [|v1|];
    #L00002a. return [|v2|];
  }
  procedure (|boolean|) {|java.util.HashMap$Entry.equals(Ljava.lang.Object;)Z|} ((|java.util.HashMap$Entry|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 7
    @MaxStack 2
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Signature "java.util.HashMap$Entry.equals(Ljava/lang/Object;)Z" 
  {
    local dummy;
    s0;
    [|v2|];
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];


    #L00000a. s0:= instanceof @varname [|v1|] @type "(|java.util.Map$Entry|)";
    #L00000b. if s0 != 0 then goto L00001a;
    #L00002a. return 0;
    #L00001a. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001b. [|v2|]:= ((|java.util.Map$Entry|)) [|v1|] @type (|java.util.Map$Entry|);
    #L00003a. call s0:= {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|}([|v0|]) @signature "java.util.HashMap$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00003b. [|v3|]:= s0 @type (|java.lang.Object|);
    #L00004a. call s0:= {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v2|]) @signature "java.util.Map$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00004b. [|v4|]:= s0 @type (|java.lang.Object|);
    #L00005a. if [|v3|] == [|v4|] then goto L00006a;
    #L00005b. if [|v3|] == null then goto L00007a;
    #L00005c. call s0:= {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v3|],[|v4|]) @signature "java.lang.Object.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.lang.Object|] @type virtual;
    #L00005d. if s0 == 0 then goto L00007a;
    #L00006a. <@Frame (@Append, 3, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006b. call s0:= {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|}([|v0|]) @signature "java.util.HashMap$Entry.getValue()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00006c. [|v5|]:= s0 @type (|java.lang.Object|);
    #L00008a. call s0:= {|java.util.Map$Entry.getValue()Ljava.lang.Object;|}([|v2|]) @signature "java.util.Map$Entry.getValue()Ljava/lang/Object;" @classDescriptor [|java.util.Map$Entry|] @type interface;
    #L00008b. [|v6|]:= s0 @type (|java.lang.Object|);
    #L00009a. if [|v5|] == [|v6|] then goto L00010a;
    #L00009b. if [|v5|] == null then goto L00007a;
    #L00009c. call s0:= {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v5|],[|v6|]) @signature "java.lang.Object.equals(Ljava/lang/Object;)Z" @classDescriptor [|java.lang.Object|] @type virtual;
    #L00009d. if s0 == 0 then goto L00007a;
    #L00010a. <@Frame (@Append, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00010b. return 1;
    #L00007a. <@Frame (@Chop, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00007b. return 0;
  }
  procedure (|int|) {|java.util.HashMap$Entry.hashCode()I|} ((|java.util.HashMap$Entry|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 2
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Signature "java.util.HashMap$Entry.hashCode()I" 
  {
    local dummy;
    s0;
    s1;
    s2;
    s3;


    #L00000a. call s0:= {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|}([|v0|]) @signature "java.util.HashMap$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00000b. call s1:= {|java.util.Objects.hashCode(Ljava.lang.Object;)I|}(s0) @signature "java.util.Objects.hashCode(Ljava/lang/Object;)I" @classDescriptor [|java.util.Objects|] @type direct;
    #L00000c. call s2:= {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|}([|v0|]) @signature "java.util.HashMap$Entry.getValue()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00000d. call s3:= {|java.util.Objects.hashCode(Ljava.lang.Object;)I|}(s2) @signature "java.util.Objects.hashCode(Ljava/lang/Object;)I" @classDescriptor [|java.util.Objects|] @type direct;
    #L00000e. return s1^~s3;
  }
  procedure (|java.lang.String|) {|java.util.HashMap$Entry.toString()Ljava.lang.String;|} ((|java.util.HashMap$Entry|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 2
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Signature "java.util.HashMap$Entry.toString()Ljava/lang/String;" 
  {
    local dummy;
    s0;
    s1;
    s2;
    s3;
    s4;
    s5;
    s6;
    s7;


    #L00000a. s0:= new (|java.lang.StringBuilder|);
    #L00000b. call s1:= {|java.lang.StringBuilder.<init>()V|}(s0) @signature "java.lang.StringBuilder.<init>()V" @classDescriptor [|java.lang.StringBuilder|] @type special;
    #L00000c. call s2:= {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|}([|v0|]) @signature "java.util.HashMap$Entry.getKey()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00000d. call s3:= {|java.lang.StringBuilder.append(Ljava.lang.Object;)Ljava.lang.StringBuilder;|}(s0,s2) @signature "java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00000e. call s4:= {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s3,"=") @signature "java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00000f. call s5:= {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|}([|v0|]) @signature "java.util.HashMap$Entry.getValue()Ljava/lang/Object;" @classDescriptor [|java.util.HashMap$Entry|] @type virtual;
    #L00000g. call s6:= {|java.lang.StringBuilder.append(Ljava.lang.Object;)Ljava.lang.StringBuilder;|}(s4,s5) @signature "java.lang.StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00000h. call s7:= {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s6) @signature "java.lang.StringBuilder.toString()Ljava/lang/String;" @classDescriptor [|java.lang.StringBuilder|] @type virtual;
    #L00000i. return s7;
  }
  procedure (|void|) {|java.util.HashMap$Entry.recordAccess(Ljava.util.HashMap;)V|} ((|java.util.HashMap$Entry|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 0
    @Owner (|java.util.HashMap$Entry|)
    @Access ()
    @Signature "java.util.HashMap$Entry.recordAccess(Ljava/util/HashMap;)V" 
  {
    local dummy;


    #L00000a. return @void;
  }
  procedure (|void|) {|java.util.HashMap$Entry.recordRemoval(Ljava.util.HashMap;)V|} ((|java.util.HashMap$Entry|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 0
    @Owner (|java.util.HashMap$Entry|)
    @Access ()
    @Signature "java.util.HashMap$Entry.recordRemoval(Ljava/util/HashMap;)V" 
  {
    local dummy;


    #L00000a. return @void;
  }

record (|java.util.HashMap$Holder|)
    @source "HashMap.java"
    @type class
    @AccessFlag ()
    @InnerClass (
      @Name (|java.util.HashMap$Holder|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Holder, 
      @AccessFlag (PRIVATE,STATIC)
     ) 
  extends 
    (|java.lang.Object|) 
{
  (|int|) <|HashMap$Holder.ALTERNATIVE_HASHING_THRESHOLD|> @AccessFlag (STATIC,FINAL);
}

  procedure (|void|) {|java.util.HashMap$Holder.<init>()V|} ((|java.util.HashMap$Holder|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Holder|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Signature "java.util.HashMap$Holder.<init>()V" 
  {
    local dummy;
    s0;


    #L00000a. call s0:= {|java.lang.Object.<init>()V|}([|v0|]) @signature "java.lang.Object.<init>()V" @classDescriptor [|java.lang.Object|] @type special;
    #L00000b. return @void;
  }
  procedure (|void|) {|java.util.HashMap$Holder.<clinit>()V|} () 
    @MaxLocals 3
    @MaxStack 4
    @Owner (|java.util.HashMap$Holder|)
    @Access (STATIC)
    @Signature "java.util.HashMap$Holder.<clinit>()V" 
  {
    local dummy;
    s0;
    s1;
    s2;
    [|v0|];
    [|v1|];
    [|v2|];


    #L00003a. s0:= new (|sun.security.action.GetPropertyAction|);
    #L00003b. call s1:= {|sun.security.action.GetPropertyAction.<init>(Ljava.lang.String;)V|}(s0,"jdk.map.althashing.threshold") @signature "sun.security.action.GetPropertyAction.<init>(Ljava/lang/String;)V" @classDescriptor [|sun.security.action.GetPropertyAction|] @type special;
    #L00003c. call s2:= {|java.security.AccessController.doPrivileged(Ljava.security.PrivilegedAction;)Ljava.lang.Object;|}(s0) @signature "java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;" @classDescriptor [|java.security.AccessController|] @type direct;
    #L00003d. [|v0|]:= ((|java.lang.String|)) s2 @type (|java.lang.String|);
    #L00000a. if null == [|v0|] then goto L00004a;
    #L00000b. call s0:= {|java.lang.Integer.parseInt(Ljava.lang.String;)I|}([|v0|]) @signature "java.lang.Integer.parseInt(Ljava/lang/String;)I" @classDescriptor [|java.lang.Integer|] @type direct;
    #L00000c. goto L00005a;
    #L00004a. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00005a. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|), (|top|)])>
    #L00005b. [|v1|]:= "2147483647" @type ;
    #L00006a. if [|v1|] != -1 then goto L00007a;
    #L00008a. [|v1|]:= "2147483647" @type ;
    #L00007a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|)])>
    #L00007b. if [|v1|] <= 0 then goto L00001a;
    #L00009a. s0:= new (|java.lang.IllegalArgumentException|);
    #L00009b. call s1:= {|java.lang.IllegalArgumentException.<init>(Ljava.lang.String;)V|}(s0,"value must be positive integer.") @signature "java.lang.IllegalArgumentException.<init>(Ljava/lang/String;)V" @classDescriptor [|java.lang.IllegalArgumentException|] @type special;
    #L00009c. throw s0;
    #L00001a. <@Frame (@Same, 0, `[(|int|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|)])>
    #L00001b. goto L00010a;
    #L00002a. <@Frame (@Full, 1, `[(|java.lang.Object|), (|top|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00002b. [|v2|]:= s0 @type (|java.lang.Object|);
    #L00011a. s0:= new (|java.lang.Error|);
    #L00011b. call s1:= {|java.lang.Error.<init>(Ljava.lang.String;Ljava.lang.Throwable;)V|}(s0,"Illegal value for 'jdk.map.althashing.threshold'",[|v2|]) @signature "java.lang.Error.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V" @classDescriptor [|java.lang.Error|] @type special;
    #L00011c. throw s0;
    #L00010a. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|)], 0, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00010b. +|java.util.HashMap$Holder.ALTERNATIVE_HASHING_THRESHOLD|+:= [|v1|];
    #L00012a. return @void;
      catch (|java.lang.IllegalArgumentException|) @[L00000a..L00001a] goto L00002a;
  }

record (|java.util.Map$Entry|)
    @source "Map.java"
    @type interface
    @AccessFlag (PUBLIC,INTERFACE)
    @InnerClass (
      @Name (|java.util.Map$Entry|), 
      @OuterName (|java.util.Map|), 
      @InnerName Entry, 
      @AccessFlag (PUBLIC,INTERFACE,STATIC)
     ) 
  extends 
    (|java.lang.Object|) 
{
}

  procedure (|java.lang.Object|) {|java.util.Map$Entry.getKey()Ljava.lang.Object;|} ((|java.util.Map$Entry|) [|v0|]) 
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Signature "java.util.Map$Entry.getKey()Ljava/lang/Object;" 
  {



    #nulla. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.Map$Entry.getValue()Ljava.lang.Object;|} ((|java.util.Map$Entry|) [|v0|]) 
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Signature "java.util.Map$Entry.getValue()Ljava/lang/Object;" 
  {



    #nulla. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.Map$Entry.setValue(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.Map$Entry|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Signature "java.util.Map$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;" 
  {



    #nulla. return @void;
  }
  procedure (|boolean|) {|java.util.Map$Entry.equals(Ljava.lang.Object;)Z|} ((|java.util.Map$Entry|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Signature "java.util.Map$Entry.equals(Ljava/lang/Object;)Z" 
  {



    #nulla. return @void;
  }
  procedure (|int|) {|java.util.Map$Entry.hashCode()I|} ((|java.util.Map$Entry|) [|v0|]) 
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Signature "java.util.Map$Entry.hashCode()I" 
  {



    #nulla. return @void;
  }


