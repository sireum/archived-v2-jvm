record (|java.util.HashMap|)
    @Source "HashMap.java"
    @GenericSignature "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/AbstractMap<TK;TV;>;Ljava/util/Map<TK;TV;>;Ljava/lang/Cloneable;Ljava/io/Serializable;"
    @Type class
    @AccessFlag (PUBLIC)
    @InnerClass (
      @Name (|java.util.Map$Entry|), 
      @OuterName (|java.util.Map|), 
      @InnerName Entry, 
      @AccessFlag (PUBLIC,INTERFACE,STATIC)
     ) 
  extends 
    (|java.util.AbstractMap|) 
{
  (|int|) <|HashMap.DEFAULT_INITIAL_CAPACITY|> @AccessFlag (STATIC,FINAL);
  (|int|) <|HashMap.MAXIMUM_CAPACITY|> @AccessFlag (STATIC,FINAL);
  (|float|) <|HashMap.DEFAULT_LOAD_FACTOR|> @AccessFlag (STATIC,FINAL);
  (|java.util.HashMap$Entry[]|) <|HashMap.EMPTY_TABLE|> @GenericSignature "[Ljava/util/HashMap$Entry<**>;" @AccessFlag (STATIC,FINAL);
  (|java.util.HashMap$Entry[]|) <|HashMap.table|> @GenericSignature "[Ljava/util/HashMap$Entry<TK;TV;>;" @AccessFlag (TRANSIENT,VARARGS);
  (|int|) <|HashMap.size|> @AccessFlag (TRANSIENT,VARARGS);
  (|int|) <|HashMap.threshold|> @AccessFlag ();
  (|float|) <|HashMap.loadFactor|> @AccessFlag (FINAL);
  (|int|) <|HashMap.modCount|> @AccessFlag (TRANSIENT,VARARGS);
  (|int|) <|HashMap.ALTERNATIVE_HASHING_THRESHOLD_DEFAULT|> @AccessFlag (STATIC,FINAL);
  (|int|) <|HashMap.hashSeed|> @AccessFlag (TRANSIENT,VARARGS);
  (|java.util.Set|) <|HashMap.entrySet|> @GenericSignature "Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;" @AccessFlag (PRIVATE,TRANSIENT,VARARGS);
  (|long|) <|HashMap.serialVersionUID|> @AccessFlag (PRIVATE,STATIC,FINAL);
}

  procedure (|void|) {|java.util.HashMap.<init>(IF)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|], (|float|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC,CONSTRUCTOR)
    @Desc "java.util.HashMap.<init>(IF)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    s3;
    s4;
    s5;
    s6;

    #L00000Aa. call s0  := {|java.util.AbstractMap.<init>()V|}([|v0|]) @ClassDescriptor (|java.util.AbstractMap|) @Type special;
    #L00001Aa. s0 := +|java.util.HashMap.EMPTY_TABLE|+ @Type (|java.util.HashMap$Entry[]|);
    #L00001Ab. [|v0|].<|java.util.HashMap.table|> := ((|[Ljava.util.HashMap$Entry;|)) s0 @Type (|java.util.HashMap$Entry[]|);
    #L00002Aa. [|v0|].<|java.util.HashMap.hashSeed|> := 0 @Type (|int|);
    #L00003Aa. [|v0|].<|java.util.HashMap.entrySet|> := null @Type (|java.util.Set|);
    #L00004Aa. if [|v1|] >= 0 then goto L00005Aa;
    #L00006Aa. s0 := new (|java.lang.IllegalArgumentException|);
    #L00006Ab. s1 := new (|java.lang.StringBuilder|);
    #L00006Ac. call s2  := {|java.lang.StringBuilder.<init>()V|}(s1) @ClassDescriptor (|java.lang.StringBuilder|) @Type special;
    #L00006Ad. call s3  := {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s1,"Illegal initial capacity: ") @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00006Ae. call s4  := {|java.lang.StringBuilder.append(I)Ljava.lang.StringBuilder;|}(s3,[|v1|]) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00006Af. call s5  := {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s4) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00006Ag. call s6  := {|java.lang.IllegalArgumentException.<init>(Ljava.lang.String;)V|}(s0,s5) @ClassDescriptor (|java.lang.IllegalArgumentException|) @Type special;
    #L00006Ah. throw s0;
    #L00005Aa. <@Frame (@Full, 3, `[(|java.lang.Object|), (|int|), (|float|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00005Ab. if [|v1|] <= "1073741824" then goto L00007Aa;
    #L00008Aa. [|v1|] := "1073741824";
    #L00007Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|float|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00007Ab. s0 := fcmpg(0.0,[|v2|]);
    #L00007Ac. if s0 <= 0 then goto L00009Aa;
    #L00007Ad. call s1  := {|java.lang.Float.isNaN(F)Z|}([|v2|]) @ClassDescriptor (|java.lang.Float|) @Type direct;
    #L00007Ae. if s1 == 0 then goto L00010Aa;
    #L00009Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|float|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00009Ab. s0 := new (|java.lang.IllegalArgumentException|);
    #L00009Ac. s1 := new (|java.lang.StringBuilder|);
    #L00009Ad. call s2  := {|java.lang.StringBuilder.<init>()V|}(s1) @ClassDescriptor (|java.lang.StringBuilder|) @Type special;
    #L00009Ae. call s3  := {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s1,"Illegal load factor: ") @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00009Af. call s4  := {|java.lang.StringBuilder.append(F)Ljava.lang.StringBuilder;|}(s3,[|v2|]) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00009Ag. call s5  := {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s4) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00009Ah. call s6  := {|java.lang.IllegalArgumentException.<init>(Ljava.lang.String;)V|}(s0,s5) @ClassDescriptor (|java.lang.IllegalArgumentException|) @Type special;
    #L00009Ai. throw s0;
    #L00010Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|float|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00010Ab. [|v0|].<|java.util.HashMap.loadFactor|> := [|v2|] @Type (|float|);
    #L00011Aa. [|v0|].<|java.util.HashMap.threshold|> := [|v1|] @Type (|int|);
    #L00012Aa. call s0  := {|java.util.HashMap.init()V|}([|v0|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00013Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap.<init>(I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC,CONSTRUCTOR)
    @Desc "java.util.HashMap.<init>(I)V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap.<init>(IF)V|}([|v0|],[|v1|],0.75) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00001Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap.<init>()V|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC,CONSTRUCTOR)
    @Desc "java.util.HashMap.<init>()V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap.<init>(IF)V|}([|v0|],16,0.75) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00001Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap.<init>(Ljava.util.Map;)V|} ((|java.util.HashMap|) [|v0|], (|java.util.Map|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 3
    @GenericSignature "(Ljava/util/Map<+TK;+TV;>;)V"
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC,CONSTRUCTOR)
    @Desc "java.util.HashMap.<init>(Ljava.util.Map;)V" 
  {
    local jmp;
    s0;
    s1;
    s2;

    #L00000Aa. call s0  := {|java.util.Map.size()I|}([|v1|]) @ClassDescriptor (|java.util.Map|) @Type interface;
    #L00000Ab. call s1  := {|java.lang.Math.max(II)I|}((((|int|))(((|float|))s0/0.75)+1),16) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00000Ac. call s2  := {|java.util.HashMap.<init>(IF)V|}([|v0|],s1,0.75) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00001Aa. s0 := [|v0|].<|java.util.HashMap.threshold|> @Type (|int|);
    #L00001Ab. call s1  := {|java.util.HashMap.inflateTable(I)V|}([|v0|],s0) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00002Aa. call s0  := {|java.util.HashMap.putAllForCreate(Ljava.util.Map;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00003Aa. return @void;
  }
  procedure (|int|) {|java.util.HashMap.roundUpToPowerOf2(I)I|} ((|int|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE,STATIC)
    @Desc "java.util.HashMap.roundUpToPowerOf2(I)I" 
  {
    local jmp;
    s0;
    s1;
    [|v1|];

    #L00000Aa. if [|v0|] < "1073741824" then goto L00001Aa;
    #L00000Ab. jmp := "1073741824";
    #L00000Ac. goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. call s0  := {|java.lang.Integer.highestOneBit(I)I|}([|v0|]) @ClassDescriptor (|java.lang.Integer|) @Type direct;
    #L00001Ac. [|v1|] := s0 @Type (|java.lang.Object|);
    #L00001Ad. if s0 == 0 then goto L00003Aa;
    #L00001Ae. call s1  := {|java.lang.Integer.bitCount(I)I|}([|v0|]) @ClassDescriptor (|java.lang.Integer|) @Type direct;
    #L00001Af. if s1 <= 1 then goto L00004Aa;
    #L00001Ag. jmp := ([|v1|]^<1);
    #L00001Ah. goto L00002Aa;
    #L00004Aa. <@Frame (@Append, 1, `[(|int|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004Ab. jmp := [|v1|];
    #L00004Ac. goto L00002Aa;
    #L00003Aa. <@Frame (@Same, 0, `[(|int|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00003Ab. jmp := 1;
    #L00002Aa. <@Frame (@Full, 1, `[(|int|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002Ab. [|v1|] := jmp @Type int;
    #L00005Aa. return [|v1|];
  }
  procedure (|void|) {|java.util.HashMap.inflateTable(I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.inflateTable(I)V" 
  {
    local jmp;
    s0;
    s1;
    [|v2|];

    #L00000Aa. call s0  := {|java.util.HashMap.roundUpToPowerOf2(I)I|}([|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00000Ab. [|v2|] := s0 @Type (|java.lang.Object|);
    #L00001Aa. s0 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00001Ab. call s1  := {|java.lang.Math.min(FF)F|}((((|float|))[|v2|]*s0),1.07374182E9) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00001Ac. [|v0|].<|java.util.HashMap.threshold|> := ((|int|))s1 @Type (|int|);
    #L00002Aa. s0 := new (|java.util.HashMap$Entry|)[[|v2|]];
    #L00002Ab. [|v0|].<|java.util.HashMap.table|> := s0 @Type (|java.util.HashMap$Entry[]|);
    #L00003Aa. call s0  := {|java.util.HashMap.initHashSeedAsNeeded(I)Z|}([|v0|],[|v2|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00004Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap.init()V|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 0
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.init()V" 
  {
    local jmp;

    #L00000Aa. return @void;
  }
  procedure (|boolean|) {|java.util.HashMap.initHashSeedAsNeeded(I)Z|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Desc "java.util.HashMap.initHashSeedAsNeeded(I)Z" 
  {
    local jmp;
    s0;
    s1;
    [|v2|];
    [|v3|];
    [|v4|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.hashSeed|> @Type (|int|);
    #L00000Ab. if s0 == 0 then goto L00001Aa;
    #L00000Ac. jmp := 1;
    #L00000Ad. goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. jmp := 0;
    #L00002Aa. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002Ab. [|v2|] := jmp @Type (|int|);
    #L00003Aa. call s0  := {|sun.misc.VM.isBooted()Z|}() @ClassDescriptor (|sun.misc.VM|) @Type direct;
    #L00003Ab. if s0 == 0 then goto L00004Aa;
    #L00003Ac. s1 := +|java.util.HashMap$Holder.ALTERNATIVE_HASHING_THRESHOLD|+ @Type (|int|);
    #L00003Ad. if [|v1|] < s1 then goto L00004Aa;
    #L00003Ae. jmp := 1;
    #L00003Af. goto L00005Aa;
    #L00004Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|)])>
    #L00004Ab. jmp := 0;
    #L00005Aa. <@Frame (@Same1, 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00005Ab. [|v3|] := jmp @Type (|int|);
    #L00006Aa. [|v4|] := ([|v2|]^~[|v3|]) @Type (|int|);
    #L00007Aa. if [|v4|] == 0 then goto L00008Aa;
    #L00009Aa. if [|v3|] == 0 then goto L00010Aa;
    #L00009Ab. call s0  := {|sun.misc.Hashing.randomHashSeed(Ljava.lang.Object;)I|}([|v0|]) @ClassDescriptor (|sun.misc.Hashing|) @Type direct;
    #L00009Ac. jmp := s0;
    #L00009Ad. goto L00011Aa;
    #L00010Aa. <@Frame (@Full, 5, `[(|java.lang.Object|), (|int|), (|int|), (|int|), (|int|)], 1, `[(|java.lang.Object|), (|top|)])>
    #L00010Ab. jmp := 0;
    #L00011Aa. <@Frame (@Full, 5, `[(|java.lang.Object|), (|int|), (|int|), (|int|), (|int|)], 2, `[(|java.lang.Object|), (|int|)])>
    #L00011Ab. [|v0|].<|java.util.HashMap.hashSeed|> := jmp @Type (|int|);
    #L00008Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|int|), (|int|), (|int|)], 0, `[(|java.lang.Object|), (|int|)])>
    #L00008Ab. return [|v4|];
  }
  procedure (|int|) {|java.util.HashMap.hash(Ljava.lang.Object;)I|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Desc "java.util.HashMap.hash(Ljava.lang.Object;)I" 
  {
    local jmp;
    s0;
    [|v2|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.hashSeed|> @Type (|int|);
    #L00000Ab. [|v2|] := s0 @Type (|int|);
    #L00001Aa. if 0 == [|v2|] then goto L00002Aa;
    #L00001Ab. s0 := instanceof @varname [|v1|] @Type "(|java.lang.String|)";
    #L00001Ac. if s0 == 0 then goto L00002Aa;
    #L00003Aa. call s0  := {|sun.misc.Hashing.stringHash32(Ljava.lang.String;)I|}(((|java.lang.String|)) [|v1|]) @ClassDescriptor (|sun.misc.Hashing|) @Type direct;
    #L00003Ab. return s0;
    #L00002Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00002Ab. call s0  := {|java.lang.Object.hashCode()I|}([|v1|]) @ClassDescriptor (|java.lang.Object|) @Type virtual;
    #L00002Ac. [|v2|] := ([|v2|]^~s0) @Type (|int|);
    #L00004Aa. [|v2|] := ([|v2|]^~(([|v2|]^>>>20)^~([|v2|]^>>>12))) @Type (|int|);
    #L00005Aa. return (([|v2|]^~([|v2|]^>>>7))^~([|v2|]^>>>4));
  }
  procedure (|int|) {|java.util.HashMap.indexFor(II)I|} ((|int|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (STATIC)
    @Desc "java.util.HashMap.indexFor(II)I" 
  {
    local jmp;

    #L00000Aa. return ([|v0|]^&([|v1|]-1));
  }
  procedure (|int|) {|java.util.HashMap.size()I|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.size()I" 
  {
    local jmp;
    s0;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ab. return s0;
  }
  procedure (|boolean|) {|java.util.HashMap.isEmpty()Z|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.isEmpty()Z" 
  {
    local jmp;
    s0;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ab. if s0 != 0 then goto L00001Aa;
    #L00000Ac. jmp := 1;
    #L00000Ad. goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|)], 0, `[(|top|)])>
    #L00001Ab. jmp := 0;
    #L00002Aa. <@Frame (@Same1, 0, `[(|top|)], 1, `[(|int|)])>
    #L00002Ab. return jmp;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.get(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 2
    @GenericSignature "(Ljava/lang/Object;)TV;"
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.get(Ljava.lang.Object;)Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    [|v2|];

    #L00000Aa. if [|v1|] != null then goto L00001Aa;
    #L00002Aa. call s0  := {|java.util.HashMap.getForNullKey()Ljava.lang.Object;|}([|v0|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00002Ab. return s0;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. call s0  := {|java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00001Ac. [|v2|] := s0 @Type (|java.lang.Object|);
    #L00003Aa. if null != [|v2|] then goto L00004Aa;
    #L00003Ab. jmp := null;
    #L00003Ac. goto L00005Aa;
    #L00004Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004Ab. call s0  := {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|}([|v2|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00004Ac. jmp := s0;
    #L00005Aa. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|), (|top|)], 1, `[(|java.lang.Object|), (|top|)])>
    #L00005Ab. return jmp;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.getForNullKey()Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 2
    @GenericSignature "()TV;"
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.getForNullKey()Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    s1;
    [|v1|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ab. if s0 != 0 then goto L00001Aa;
    #L00002Aa. return null;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00001Ac. s1 := s0[0];
    #L00001Ad. [|v1|] := s1 @Type (|java.lang.Object|);
    #L00003Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00003Ab. if [|v1|] == null then goto L00004Aa;
    #L00005Aa. s0 := [|v1|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00005Ab. if s0 != null then goto L00006Aa;
    #L00007Aa. s0 := [|v1|].<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00007Ab. return s0;
    #L00006Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006Ab. s0 := [|v1|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00006Ac. [|v1|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00006Ad. goto L00003Aa;
    #L00004Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004Ab. return null;
  }
  procedure (|boolean|) {|java.util.HashMap.containsKey(Ljava.lang.Object;)Z|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.containsKey(Ljava.lang.Object;)Z" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ab. if s0 == null then goto L00001Aa;
    #L00000Ac. jmp := 1;
    #L00000Ad. goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. jmp := 0;
    #L00002Aa. <@Frame (@Same1, 0, `[(|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002Ab. return jmp;
  }
  procedure (|java.util.HashMap$Entry|) {|java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 3
    @GenericSignature "(Ljava/lang/Object;)Ljava/util/HashMap$Entry<TK;TV;>;"
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Desc "java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;" 
  {
    local jmp;
    s0;
    s1;
    s2;
    s3;
    [|v2|];
    [|v3|];
    [|v4|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ab. if s0 != 0 then goto L00001Aa;
    #L00002Aa. return null;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00001Ab. if [|v1|] != null then goto L00003Aa;
    #L00001Ac. jmp := 0;
    #L00001Ad. goto L00004Aa;
    #L00003Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00003Ab. call s0  := {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00003Ac. jmp := s0;
    #L00004Aa. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|)])>
    #L00004Ab. [|v2|] := jmp @Type (|int|);
    #L00005Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00005Ab. s1 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00005Ac. call s2  := {|java.util.HashMap.indexFor(II)I|}([|v2|],s1.length) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00005Ad. s3 := s0[s2];
    #L00005Ae. [|v3|] := s3 @Type (|java.lang.Object|);
    #L00006Aa. <@Frame (@Append, 2, `[(|int|), (|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00006Ab. if [|v3|] == null then goto L00007Aa;
    #L00008Aa. s0 := [|v3|].<|java.util.HashMap$Entry.hash|> @Type (|int|);
    #L00008Ab. if s0 != [|v2|] then goto L00009Aa;
    #L00008Ac. s1 := [|v3|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00008Ad. [|v4|] := s1 @Type (|java.lang.Object|);
    #L00008Ae. if s1 == [|v1|] then goto L00010Aa;
    #L00008Af. if [|v1|] == null then goto L00009Aa;
    #L00008Ag. call s2  := {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],[|v4|]) @ClassDescriptor (|java.lang.Object|) @Type virtual;
    #L00008Ah. if s2 == 0 then goto L00009Aa;
    #L00010Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00010Ab. return [|v3|];
    #L00009Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00009Ab. s0 := [|v3|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00009Ac. [|v3|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00009Ad. goto L00006Aa;
    #L00007Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00007Ab. return null;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|], (|java.lang.Object|) [|v2|]) 
    @MaxLocals 8
    @MaxStack 5
    @GenericSignature "(TK;TV;)TV;"
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];
    [|v7|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00000Ab. s1 := +|java.util.HashMap.EMPTY_TABLE|+ @Type (|java.util.HashMap$Entry[]|);
    #L00000Ac. if s0 != s1 then goto L00001Aa;
    #L00002Aa. s0 := [|v0|].<|java.util.HashMap.threshold|> @Type (|int|);
    #L00002Ab. call s1  := {|java.util.HashMap.inflateTable(I)V|}([|v0|],s0) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001Ab. if [|v1|] != null then goto L00003Aa;
    #L00004Aa. call s0  := {|java.util.HashMap.putForNullKey(Ljava.lang.Object;)Ljava.lang.Object;|}([|v0|],[|v2|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00004Ab. return s0;
    #L00003Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003Ab. call s0  := {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00003Ac. [|v3|] := s0 @Type (|java.lang.Object|);
    #L00005Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00005Ab. call s1  := {|java.util.HashMap.indexFor(II)I|}([|v3|],s0.length) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00005Ac. [|v4|] := s1 @Type (|java.lang.Object|);
    #L00006Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00006Ab. s1 := s0[[|v4|]];
    #L00006Ac. [|v5|] := s1 @Type (|java.lang.Object|);
    #L00007Aa. <@Frame (@Append, 3, `[(|int|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00007Ab. if [|v5|] == null then goto L00008Aa;
    #L00009Aa. s0 := [|v5|].<|java.util.HashMap$Entry.hash|> @Type (|int|);
    #L00009Ab. if s0 != [|v3|] then goto L00010Aa;
    #L00009Ac. s1 := [|v5|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00009Ad. [|v6|] := s1 @Type (|java.lang.Object|);
    #L00009Ae. if s1 == [|v1|] then goto L00011Aa;
    #L00009Af. call s2  := {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],[|v6|]) @ClassDescriptor (|java.lang.Object|) @Type virtual;
    #L00009Ag. if s2 == 0 then goto L00010Aa;
    #L00011Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00011Ab. s0 := [|v5|].<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00011Ac. [|v7|] := s0 @Type (|java.lang.Object|);
    #L00012Aa. [|v5|].<|java.util.HashMap$Entry.value|> := [|v2|] @Type (|java.lang.Object|);
    #L00013Aa. call s0  := {|java.util.HashMap$Entry.recordAccess(Ljava.util.HashMap;)V|}([|v5|],[|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00014Aa. return [|v7|];
    #L00010Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00010Ab. s0 := [|v5|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00010Ac. [|v5|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00010Ad. goto L00007Aa;
    #L00008Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00008Ab. s0 := [|v0|].<|java.util.HashMap.modCount|> @Type (|int|);
    #L00008Ac. [|v0|].<|java.util.HashMap.modCount|> := (s0+1) @Type (|int|);
    #L00015Aa. call s0  := {|java.util.HashMap.addEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|}([|v0|],[|v3|],[|v1|],[|v2|],[|v4|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00016Aa. return null;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.putForNullKey(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 4
    @MaxStack 5
    @GenericSignature "(TV;)TV;"
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.putForNullKey(Ljava.lang.Object;)Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    s1;
    [|v2|];
    [|v3|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00000Ab. s1 := s0[0];
    #L00000Ac. [|v2|] := s1 @Type (|java.lang.Object|);
    #L00001Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001Ab. if [|v2|] == null then goto L00002Aa;
    #L00003Aa. s0 := [|v2|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00003Ab. if s0 != null then goto L00004Aa;
    #L00005Aa. s0 := [|v2|].<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00005Ab. [|v3|] := s0 @Type (|java.lang.Object|);
    #L00006Aa. [|v2|].<|java.util.HashMap$Entry.value|> := [|v1|] @Type (|java.lang.Object|);
    #L00007Aa. call s0  := {|java.util.HashMap$Entry.recordAccess(Ljava.util.HashMap;)V|}([|v2|],[|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00008Aa. return [|v3|];
    #L00004Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00004Ab. s0 := [|v2|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00004Ac. [|v2|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00004Ad. goto L00001Aa;
    #L00002Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002Ab. s0 := [|v0|].<|java.util.HashMap.modCount|> @Type (|int|);
    #L00002Ac. [|v0|].<|java.util.HashMap.modCount|> := (s0+1) @Type (|int|);
    #L00009Aa. call s0  := {|java.util.HashMap.addEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|}([|v0|],0,null,[|v1|],0) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00010Aa. return null;
  }
  procedure (|void|) {|java.util.HashMap.putForCreate(Ljava.lang.Object;Ljava.lang.Object;)V|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|], (|java.lang.Object|) [|v2|]) 
    @MaxLocals 7
    @MaxStack 5
    @GenericSignature "(TK;TV;)V"
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.putForCreate(Ljava.lang.Object;Ljava.lang.Object;)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];

    #L00000Aa. if null != [|v1|] then goto L00001Aa;
    #L00000Ab. jmp := 0;
    #L00000Ac. goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001Ab. call s0  := {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00001Ac. jmp := s0;
    #L00002Aa. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002Ab. [|v3|] := jmp @Type (|int|);
    #L00003Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00003Ab. call s1  := {|java.util.HashMap.indexFor(II)I|}([|v3|],s0.length) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00003Ac. [|v4|] := s1 @Type (|java.lang.Object|);
    #L00004Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00004Ab. s1 := s0[[|v4|]];
    #L00004Ac. [|v5|] := s1 @Type (|java.lang.Object|);
    #L00005Aa. <@Frame (@Append, 3, `[(|int|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00005Ab. if [|v5|] == null then goto L00006Aa;
    #L00007Aa. s0 := [|v5|].<|java.util.HashMap$Entry.hash|> @Type (|int|);
    #L00007Ab. if s0 != [|v3|] then goto L00008Aa;
    #L00007Ac. s1 := [|v5|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00007Ad. [|v6|] := s1 @Type (|java.lang.Object|);
    #L00007Ae. if s1 == [|v1|] then goto L00009Aa;
    #L00007Af. if [|v1|] == null then goto L00008Aa;
    #L00007Ag. call s2  := {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],[|v6|]) @ClassDescriptor (|java.lang.Object|) @Type virtual;
    #L00007Ah. if s2 == 0 then goto L00008Aa;
    #L00009Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00009Ab. [|v5|].<|java.util.HashMap$Entry.value|> := [|v2|] @Type (|java.lang.Object|);
    #L00010Aa. return @void;
    #L00008Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00008Ab. s0 := [|v5|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00008Ac. [|v5|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00008Ad. goto L00005Aa;
    #L00006Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00006Ab. call s0  := {|java.util.HashMap.createEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|}([|v0|],[|v3|],[|v1|],[|v2|],[|v4|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00011Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap.putAllForCreate(Ljava.util.Map;)V|} ((|java.util.HashMap|) [|v0|], (|java.util.Map|) [|v1|]) 
    @MaxLocals 4
    @MaxStack 3
    @GenericSignature "(Ljava/util/Map<+TK;+TV;>;)V"
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.putAllForCreate(Ljava.util.Map;)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v2|];
    [|v3|];

    #L00000Aa. call s0  := {|java.util.Map.entrySet()Ljava.util.Set;|}([|v1|]) @ClassDescriptor (|java.util.Map|) @Type interface;
    #L00000Ab. call s1  := {|java.util.Set.iterator()Ljava.util.Iterator;|}(s0) @ClassDescriptor (|java.util.Set|) @Type interface;
    #L00000Ac. [|v2|] := s1 @Type (|java.lang.Object|);
    #L00001Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00001Ab. call s0  := {|java.util.Iterator.hasNext()Z|}([|v2|]) @ClassDescriptor (|java.util.Iterator|) @Type interface;
    #L00001Ac. if s0 == 0 then goto L00002Aa;
    #L00001Ad. call s1  := {|java.util.Iterator.next()Ljava.lang.Object;|}([|v2|]) @ClassDescriptor (|java.util.Iterator|) @Type interface;
    #L00001Ae. [|v3|] := ((|java.util.Map$Entry|)) s1 @Type (|java.util.Map$Entry|);
    #L00003Aa. call s0  := {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v3|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00003Ab. call s1  := {|java.util.Map$Entry.getValue()Ljava.lang.Object;|}([|v3|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00003Ac. call s2  := {|java.util.HashMap.putForCreate(Ljava.lang.Object;Ljava.lang.Object;)V|}([|v0|],s0,s1) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00003Ad. goto L00001Aa;
    #L00002Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00002Ab. return @void;
  }
  procedure (|void|) {|java.util.HashMap.resize(I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.resize(I)V" 
  {
    local jmp;
    s0;
    s1;
    [|v2|];
    [|v3|];
    [|v4|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00000Ab. [|v2|] := s0 @Type (|java.util.HashMap$Entry[]|);
    #L00001Aa. [|v3|] := [|v2|].length @Type (|int|);
    #L00002Aa. if [|v3|] != "1073741824" then goto L00003Aa;
    #L00004Aa. [|v0|].<|java.util.HashMap.threshold|> := "2147483647" @Type (|int|);
    #L00005Aa. return @void;
    #L00003Aa. <@Frame (@Append, 2, `[(|java.util.HashMap$Entry[]|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00003Ab. s0 := new (|java.util.HashMap$Entry|)[[|v1|]];
    #L00003Ac. [|v4|] := s0 @Type (|java.lang.Object|);
    #L00006Aa. call s0  := {|java.util.HashMap.initHashSeedAsNeeded(I)Z|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00006Ab. call s1  := {|java.util.HashMap.transfer([Ljava.util.HashMap$Entry;Z)V|}([|v0|],[|v4|],s0) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00007Aa. [|v0|].<|java.util.HashMap.table|> := [|v4|] @Type (|java.util.HashMap$Entry[]|);
    #L00008Aa. s0 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00008Ab. call s1  := {|java.lang.Math.min(FF)F|}((((|float|))[|v1|]*s0),1.07374182E9) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00008Ac. [|v0|].<|java.util.HashMap.threshold|> := ((|int|))s1 @Type (|int|);
    #L00009Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap.transfer([Ljava.util.HashMap$Entry;Z)V|} ((|java.util.HashMap|) [|v0|], (|java.util.HashMap$Entry[]|) [|v1|], (|boolean|) [|v2|]) 
    @MaxLocals 10
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.transfer([Ljava.util.HashMap$Entry;Z)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];
    [|v7|];
    [|v8|];
    [|v9|];

    #L00000Aa. [|v3|] := [|v1|].length @Type (|int|);
    #L00001Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00001Ab. [|v4|] := s0 @Type (|java.util.HashMap$Entry[]|);
    #L00001Ac. [|v5|] := [|v4|].length @Type (|int|);
    #L00001Ad. [|v6|] := 0 @Type (|int|);
    #L00002Aa. <@Frame (@Full, 7, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00002Ab. if [|v6|] >= [|v5|] then goto L00003Aa;
    #L00002Ac. s0 := [|v4|][[|v6|]];
    #L00002Ad. [|v7|] := s0 @Type (|java.lang.Object|);
    #L00004Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00004Ab. if null == [|v7|] then goto L00005Aa;
    #L00006Aa. s0 := [|v7|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00006Ab. [|v8|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00007Aa. if [|v2|] == 0 then goto L00008Aa;
    #L00009Aa. s0 := [|v7|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00009Ab. if null != s0 then goto L00010Aa;
    #L00009Ac. jmp := 0;
    #L00009Ad. goto L00011Aa;
    #L00010Aa. <@Frame (@Full, 9, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|)])>
    #L00010Ab. s1 := [|v7|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00010Ac. call s2  := {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],s1) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00010Ad. jmp := s2;
    #L00011Aa. <@Frame (@Full, 9, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 2, `[(|java.lang.Object|), (|int|), (|top|)])>
    #L00011Ab. [|v7|].<|java.util.HashMap$Entry.hash|> := jmp @Type (|int|);
    #L00008Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|int|), (|top|)])>
    #L00008Ab. s0 := [|v7|].<|java.util.HashMap$Entry.hash|> @Type (|int|);
    #L00008Ac. call s1  := {|java.util.HashMap.indexFor(II)I|}(s0,[|v3|]) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00008Ad. [|v9|] := s1 @Type (|java.lang.Object|);
    #L00012Aa. s0 := [|v1|][[|v9|]];
    #L00012Ab. [|v7|].<|java.util.HashMap$Entry.next|> := s0 @Type (|java.util.HashMap$Entry|);
    #L00013Aa. [|v1|][[|v9|]] := [|v7|];
    #L00014Aa. [|v7|] := [|v8|] @Type java.lang.Object;
    #L00015Aa. goto L00004Aa;
    #L00005Aa. <@Frame (@Chop, 2, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|int|), (|top|)])>
    #L00005Ab. [|v6|] := [|v6|] + 1 @Type (|int|);
    #L00005Ac. goto L00002Aa;
    #L00003Aa. <@Frame (@Chop, 3, `[(|java.lang.Object|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.util.HashMap$Entry[]|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|int|), (|top|)])>
    #L00003Ab. return @void;
  }
  procedure (|void|) {|java.util.HashMap.putAll(Ljava.util.Map;)V|} ((|java.util.HashMap|) [|v0|], (|java.util.Map|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 3
    @GenericSignature "(Ljava/util/Map<+TK;+TV;>;)V"
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.putAll(Ljava.util.Map;)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    s3;
    [|v2|];
    [|v3|];
    [|v4|];

    #L00000Aa. call s0  := {|java.util.Map.size()I|}([|v1|]) @ClassDescriptor (|java.util.Map|) @Type interface;
    #L00000Ab. [|v2|] := s0 @Type (|java.lang.Object|);
    #L00001Aa. if [|v2|] != 0 then goto L00002Aa;
    #L00003Aa. return @void;
    #L00002Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00002Ab. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00002Ac. s1 := +|java.util.HashMap.EMPTY_TABLE|+ @Type (|java.util.HashMap$Entry[]|);
    #L00002Ad. if s0 != s1 then goto L00004Aa;
    #L00005Aa. s0 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00005Ab. s1 := [|v0|].<|java.util.HashMap.threshold|> @Type (|int|);
    #L00005Ac. call s2  := {|java.lang.Math.max(FF)F|}((((|float|))[|v2|]*s0),((|float|))s1) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00005Ad. call s3  := {|java.util.HashMap.inflateTable(I)V|}([|v0|],((|int|))s2) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00004Aa. <@Frame (@Same, 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00004Ab. s0 := [|v0|].<|java.util.HashMap.threshold|> @Type (|int|);
    #L00004Ac. if [|v2|] <= s0 then goto L00006Aa;
    #L00007Aa. s0 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00007Ab. [|v3|] := ((|int|))((((|float|))[|v2|]/s0)+1.0) @Type (|int|);
    #L00008Aa. if [|v3|] <= "1073741824" then goto L00009Aa;
    #L00010Aa. [|v3|] := "1073741824";
    #L00009Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00009Ab. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00009Ac. [|v4|] := s0.length @Type (|int|);
    #L00011Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00011Ab. if [|v4|] >= [|v3|] then goto L00012Aa;
    #L00013Aa. [|v4|] := ([|v4|]^<1) @Type (|int|);
    #L00013Ab. goto L00011Aa;
    #L00012Aa. <@Frame (@Same, 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00012Ab. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00012Ac. if [|v4|] <= s0.length then goto L00006Aa;
    #L00014Aa. call s0  := {|java.util.HashMap.resize(I)V|}([|v0|],[|v4|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00006Aa. <@Frame (@Chop, 2, `[(|int|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00006Ab. call s0  := {|java.util.Map.entrySet()Ljava.util.Set;|}([|v1|]) @ClassDescriptor (|java.util.Map|) @Type interface;
    #L00006Ac. call s1  := {|java.util.Set.iterator()Ljava.util.Iterator;|}(s0) @ClassDescriptor (|java.util.Set|) @Type interface;
    #L00006Ad. [|v3|] := s1 @Type (|java.lang.Object|);
    #L00015Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00015Ab. call s0  := {|java.util.Iterator.hasNext()Z|}([|v3|]) @ClassDescriptor (|java.util.Iterator|) @Type interface;
    #L00015Ac. if s0 == 0 then goto L00016Aa;
    #L00015Ad. call s1  := {|java.util.Iterator.next()Ljava.lang.Object;|}([|v3|]) @ClassDescriptor (|java.util.Iterator|) @Type interface;
    #L00015Ae. [|v4|] := ((|java.util.Map$Entry|)) s1 @Type (|java.util.Map$Entry|);
    #L00017Aa. call s0  := {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v4|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00017Ab. call s1  := {|java.util.Map$Entry.getValue()Ljava.lang.Object;|}([|v4|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00017Ac. call s2  := {|java.util.HashMap.put(Ljava.lang.Object;Ljava.lang.Object;)Ljava.lang.Object;|}([|v0|],s0,s1) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00017Ad. goto L00015Aa;
    #L00016Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00016Ab. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.remove(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 2
    @GenericSignature "(Ljava/lang/Object;)TV;"
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.remove(Ljava.lang.Object;)Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    [|v2|];

    #L00000Aa. call s0  := {|java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ab. [|v2|] := s0 @Type (|java.lang.Object|);
    #L00001Aa. if [|v2|] != null then goto L00002Aa;
    #L00001Ab. jmp := null;
    #L00001Ac. goto L00003Aa;
    #L00002Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002Ab. s0 := [|v2|].<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00002Ac. jmp := s0;
    #L00003Aa. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|), (|top|)], 1, `[(|java.lang.Object|), (|top|)])>
    #L00003Ab. return jmp;
  }
  procedure (|java.util.HashMap$Entry|) {|java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 8
    @MaxStack 3
    @GenericSignature "(Ljava/lang/Object;)Ljava/util/HashMap$Entry<TK;TV;>;"
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Desc "java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v2|];
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];
    [|v7|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ab. if s0 != 0 then goto L00001Aa;
    #L00002Aa. return null;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00001Ab. if [|v1|] != null then goto L00003Aa;
    #L00001Ac. jmp := 0;
    #L00001Ad. goto L00004Aa;
    #L00003Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00003Ab. call s0  := {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00003Ac. jmp := s0;
    #L00004Aa. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|)])>
    #L00004Ab. [|v2|] := jmp @Type (|int|);
    #L00005Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00005Ab. call s1  := {|java.util.HashMap.indexFor(II)I|}([|v2|],s0.length) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00005Ac. [|v3|] := s1 @Type (|java.lang.Object|);
    #L00006Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00006Ab. s1 := s0[[|v3|]];
    #L00006Ac. [|v4|] := s1 @Type (|java.lang.Object|);
    #L00007Aa. [|v5|] := [|v4|] @Type java.lang.Object;
    #L00008Aa. <@Frame (@Full, 6, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00008Ab. if [|v5|] == null then goto L00009Aa;
    #L00010Aa. s0 := [|v5|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00010Ab. [|v6|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00011Aa. s0 := [|v5|].<|java.util.HashMap$Entry.hash|> @Type (|int|);
    #L00011Ab. if s0 != [|v2|] then goto L00012Aa;
    #L00011Ac. s1 := [|v5|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00011Ad. [|v7|] := s1 @Type (|java.lang.Object|);
    #L00011Ae. if s1 == [|v1|] then goto L00013Aa;
    #L00011Af. if [|v1|] == null then goto L00012Aa;
    #L00011Ag. call s2  := {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],[|v7|]) @ClassDescriptor (|java.lang.Object|) @Type virtual;
    #L00011Ah. if s2 == 0 then goto L00012Aa;
    #L00013Aa. <@Frame (@Append, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00013Ab. s0 := [|v0|].<|java.util.HashMap.modCount|> @Type (|int|);
    #L00013Ac. [|v0|].<|java.util.HashMap.modCount|> := (s0+1) @Type (|int|);
    #L00014Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00014Ab. [|v0|].<|java.util.HashMap.size|> := (s0-1) @Type (|int|);
    #L00015Aa. if [|v4|] != [|v5|] then goto L00016Aa;
    #L00017Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00017Ab. s0[[|v3|]] := [|v6|];
    #L00017Ac. goto L00018Aa;
    #L00016Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00016Ab. [|v4|].<|java.util.HashMap$Entry.next|> := [|v6|] @Type (|java.util.HashMap$Entry|);
    #L00018Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00018Ab. call s0  := {|java.util.HashMap$Entry.recordRemoval(Ljava.util.HashMap;)V|}([|v5|],[|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00019Aa. return [|v5|];
    #L00012Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00012Ab. [|v4|] := [|v5|] @Type java.lang.Object;
    #L00020Aa. [|v5|] := [|v6|] @Type java.lang.Object;
    #L00021Aa. goto L00008Aa;
    #L00009Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00009Ab. return [|v5|];
  }
  procedure (|java.util.HashMap$Entry|) {|java.util.HashMap.removeMapping(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 9
    @MaxStack 3
    @GenericSignature "(Ljava/lang/Object;)Ljava/util/HashMap$Entry<TK;TV;>;"
    @Owner (|java.util.HashMap|)
    @Access (FINAL)
    @Desc "java.util.HashMap.removeMapping(Ljava.lang.Object;)Ljava.util.HashMap$Entry;" 
  {
    local jmp;
    s0;
    s1;
    [|v2|];
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];
    [|v7|];
    [|v8|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ab. if s0 == 0 then goto L00001Aa;
    #L00000Ac. s1 := instanceof @varname [|v1|] @Type "(|java.util.Map$Entry|)";
    #L00000Ad. if s1 != 0 then goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00001Ab. return null;
    #L00002Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00002Ab. [|v2|] := ((|java.util.Map$Entry|)) [|v1|] @Type (|java.util.Map$Entry|);
    #L00003Aa. call s0  := {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v2|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00003Ab. [|v3|] := s0 @Type (|java.lang.Object|);
    #L00004Aa. if [|v3|] != null then goto L00005Aa;
    #L00004Ab. jmp := 0;
    #L00004Ac. goto L00006Aa;
    #L00005Aa. <@Frame (@Append, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|)])>
    #L00005Ab. call s0  := {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v3|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00005Ac. jmp := s0;
    #L00006Aa. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|)])>
    #L00006Ab. [|v4|] := jmp @Type (|int|);
    #L00007Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00007Ab. call s1  := {|java.util.HashMap.indexFor(II)I|}([|v4|],s0.length) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00007Ac. [|v5|] := s1 @Type (|java.lang.Object|);
    #L00008Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00008Ab. s1 := s0[[|v5|]];
    #L00008Ac. [|v6|] := s1 @Type (|java.lang.Object|);
    #L00009Aa. [|v7|] := [|v6|] @Type java.lang.Object;
    #L00010Aa. <@Frame (@Full, 8, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00010Ab. if [|v7|] == null then goto L00011Aa;
    #L00012Aa. s0 := [|v7|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00012Ab. [|v8|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00013Aa. s0 := [|v7|].<|java.util.HashMap$Entry.hash|> @Type (|int|);
    #L00013Ab. if s0 != [|v4|] then goto L00014Aa;
    #L00013Ac. call s1  := {|java.util.HashMap$Entry.equals(Ljava.lang.Object;)Z|}([|v7|],[|v2|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00013Ad. if s1 == 0 then goto L00014Aa;
    #L00015Aa. s0 := [|v0|].<|java.util.HashMap.modCount|> @Type (|int|);
    #L00015Ab. [|v0|].<|java.util.HashMap.modCount|> := (s0+1) @Type (|int|);
    #L00016Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00016Ab. [|v0|].<|java.util.HashMap.size|> := (s0-1) @Type (|int|);
    #L00017Aa. if [|v6|] != [|v7|] then goto L00018Aa;
    #L00019Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00019Ab. s0[[|v5|]] := [|v8|];
    #L00019Ac. goto L00020Aa;
    #L00018Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00018Ab. [|v6|].<|java.util.HashMap$Entry.next|> := [|v8|] @Type (|java.util.HashMap$Entry|);
    #L00020Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00020Ab. call s0  := {|java.util.HashMap$Entry.recordRemoval(Ljava.util.HashMap;)V|}([|v7|],[|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00021Aa. return [|v7|];
    #L00014Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00014Ab. [|v6|] := [|v7|] @Type java.lang.Object;
    #L00022Aa. [|v7|] := [|v8|] @Type java.lang.Object;
    #L00023Aa. goto L00010Aa;
    #L00011Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|int|), (|int|), (|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|int|), (|top|), (|top|)])>
    #L00011Ab. return [|v7|];
  }
  procedure (|void|) {|java.util.HashMap.clear()V|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 3
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.clear()V" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.modCount|> @Type (|int|);
    #L00000Ab. [|v0|].<|java.util.HashMap.modCount|> := (s0+1) @Type (|int|);
    #L00001Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00001Ab. call s1  := {|java.util.Arrays.fill([Ljava.lang.Object;Ljava.lang.Object;)V|}(s0,null) @ClassDescriptor (|java.util.Arrays|) @Type direct;
    #L00002Aa. [|v0|].<|java.util.HashMap.size|> := 0 @Type (|int|);
    #L00003Aa. return @void;
  }
  procedure (|boolean|) {|java.util.HashMap.containsValue(Ljava.lang.Object;)Z|} ((|java.util.HashMap|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 5
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.containsValue(Ljava.lang.Object;)Z" 
  {
    local jmp;
    s0;
    s1;
    [|v2|];
    [|v3|];
    [|v4|];

    #L00000Aa. if [|v1|] != null then goto L00001Aa;
    #L00002Aa. call s0  := {|java.util.HashMap.containsNullValue()Z|}([|v0|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00002Ab. return s0;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00001Ac. [|v2|] := s0 @Type (|java.util.HashMap$Entry[]|);
    #L00003Aa. [|v3|] := 0 @Type (|int|);
    #L00004Aa. <@Frame (@Append, 2, `[(|java.util.HashMap$Entry[]|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004Ab. if [|v3|] >= [|v2|].length then goto L00005Aa;
    #L00006Aa. s0 := [|v2|][[|v3|]];
    #L00006Ab. [|v4|] := s0 @Type (|java.lang.Object|);
    #L00007Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00007Ab. if [|v4|] == null then goto L00008Aa;
    #L00009Aa. s0 := [|v4|].<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00009Ab. call s1  := {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v1|],s0) @ClassDescriptor (|java.lang.Object|) @Type virtual;
    #L00009Ac. if s1 == 0 then goto L00010Aa;
    #L00011Aa. return 1;
    #L00010Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00010Ab. s0 := [|v4|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00010Ac. [|v4|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00010Ad. goto L00007Aa;
    #L00008Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00008Ab. [|v3|] := [|v3|] + 1 @Type (|int|);
    #L00008Ac. goto L00004Aa;
    #L00005Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00005Ab. return 0;
  }
  procedure (|boolean|) {|java.util.HashMap.containsNullValue()Z|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 4
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.containsNullValue()Z" 
  {
    local jmp;
    s0;
    [|v1|];
    [|v2|];
    [|v3|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00000Ab. [|v1|] := s0 @Type (|java.util.HashMap$Entry[]|);
    #L00001Aa. [|v2|] := 0 @Type (|int|);
    #L00002Aa. <@Frame (@Append, 2, `[(|java.util.HashMap$Entry[]|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002Ab. if [|v2|] >= [|v1|].length then goto L00003Aa;
    #L00004Aa. s0 := [|v1|][[|v2|]];
    #L00004Ab. [|v3|] := s0 @Type (|java.lang.Object|);
    #L00005Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00005Ab. if [|v3|] == null then goto L00006Aa;
    #L00007Aa. s0 := [|v3|].<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00007Ab. if s0 != null then goto L00008Aa;
    #L00009Aa. return 1;
    #L00008Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00008Ab. s0 := [|v3|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00008Ac. [|v3|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00008Ad. goto L00005Aa;
    #L00006Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006Ab. [|v2|] := [|v2|] + 1 @Type (|int|);
    #L00006Ac. goto L00002Aa;
    #L00003Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|int|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00003Ab. return 0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap.clone()Ljava.lang.Object;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 3
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.clone()Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    s1;
    s2;
    s3;
    s4;
    s5;
    s6;
    [|v1|];
    [|v2|];

    #L00003Aa. [|v1|] := null @Type (|java.lang.Object|);
    #L00000Aa. call s0  := {|java.util.AbstractMap.clone()Ljava.lang.Object;|}([|v0|]) @ClassDescriptor (|java.util.AbstractMap|) @Type special;
    #L00000Ab. [|v1|] := ((|java.util.HashMap|)) s0 @Type (|java.util.HashMap|);
    #L00001Aa. goto L00004Aa;
    #L00002Aa. <@Frame (@Full, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00002Ab. [|v2|] := "Exception" @Type (|java.lang.Object|);
    #L00004Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00004Ab. s0 := [|v1|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00004Ac. s1 := +|java.util.HashMap.EMPTY_TABLE|+ @Type (|java.util.HashMap$Entry[]|);
    #L00004Ad. if s0 == s1 then goto L00005Aa;
    #L00006Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00006Ab. s1 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00006Ac. call s2  := {|java.lang.Math.min(FF)F|}((1.0/s1),4.0) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00006Ad. call s3  := {|java.lang.Math.min(FF)F|}((((|float|))s0*s2),1.07374182E9) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00006Ae. s4 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00006Af. call s5  := {|java.lang.Math.min(II)I|}(((|int|))s3,s4.length) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00006Ag. call s6  := {|java.util.HashMap.inflateTable(I)V|}([|v1|],s5) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00005Aa. <@Frame (@Same, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|top|)], 0, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00005Ab. [|v1|].<|java.util.HashMap.entrySet|> := null @Type (|java.util.Set|);
    #L00007Aa. [|v1|].<|java.util.HashMap.modCount|> := 0 @Type (|int|);
    #L00008Aa. [|v1|].<|java.util.HashMap.size|> := 0 @Type (|int|);
    #L00009Aa. call s0  := {|java.util.HashMap.init()V|}([|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00010Aa. call s0  := {|java.util.HashMap.putAllForCreate(Ljava.util.Map;)V|}([|v1|],[|v0|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00011Aa. return [|v1|];
      catch (|java.lang.CloneNotSupportedException|) @[L00000Aa..L00001Aa] goto L00002Aa;
  }
  procedure (|void|) {|java.util.HashMap.addEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|], (|java.lang.Object|) [|v2|], (|java.lang.Object|) [|v3|], (|int|) [|v4|]) 
    @MaxLocals 5
    @MaxStack 5
    @GenericSignature "(ITK;TV;I)V"
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.addEntry(ILjava.lang.Object;Ljava.lang.Object;I)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    s3;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ab. s1 := [|v0|].<|java.util.HashMap.threshold|> @Type (|int|);
    #L00000Ac. if s0 < s1 then goto L00001Aa;
    #L00000Ad. s2 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00000Ae. s3 := s2[[|v4|]];
    #L00000Af. if null == s3 then goto L00001Aa;
    #L00002Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00002Ab. call s1  := {|java.util.HashMap.resize(I)V|}([|v0|],(2*s0.length)) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00003Aa. if null == [|v2|] then goto L00004Aa;
    #L00003Ab. call s0  := {|java.util.HashMap.hash(Ljava.lang.Object;)I|}([|v0|],[|v2|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00003Ac. jmp := s0;
    #L00003Ad. goto L00005Aa;
    #L00004Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00004Ab. jmp := 0;
    #L00005Aa. <@Frame (@Same1, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00005Ab. [|v1|] := jmp @Type (|java.lang.Object|);
    #L00006Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00006Ab. call s1  := {|java.util.HashMap.indexFor(II)I|}([|v1|],s0.length) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00006Ac. [|v4|] := s1 @Type (|java.lang.Object|);
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001Ab. call s0  := {|java.util.HashMap.createEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|}([|v0|],[|v1|],[|v2|],[|v3|],[|v4|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00007Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap.createEntry(ILjava.lang.Object;Ljava.lang.Object;I)V|} ((|java.util.HashMap|) [|v0|], (|int|) [|v1|], (|java.lang.Object|) [|v2|], (|java.lang.Object|) [|v3|], (|int|) [|v4|]) 
    @MaxLocals 6
    @MaxStack 8
    @GenericSignature "(ITK;TV;I)V"
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.createEntry(ILjava.lang.Object;Ljava.lang.Object;I)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v5|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00000Ab. s1 := s0[[|v4|]];
    #L00000Ac. [|v5|] := s1 @Type (|java.lang.Object|);
    #L00001Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00001Ab. s1 := new (|java.util.HashMap$Entry|);
    #L00001Ac. call s2  := {|java.util.HashMap$Entry.<init>(ILjava.lang.Object;Ljava.lang.Object;Ljava.util.HashMap$Entry;)V|}(s1,[|v1|],[|v2|],[|v3|],[|v5|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type special;
    #L00001Ad. s0[[|v4|]] := s1;
    #L00002Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00002Ab. [|v0|].<|java.util.HashMap.size|> := (s0+1) @Type (|int|);
    #L00003Aa. return @void;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap.newKeyIterator()Ljava.util.Iterator;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 4
    @GenericSignature "()Ljava/util/Iterator<TK;>;"
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.newKeyIterator()Ljava.util.Iterator;" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := new (|java.util.HashMap$KeyIterator|);
    #L00000Ab. call s1  := {|java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @ClassDescriptor (|java.util.HashMap$KeyIterator|) @Type special;
    #L00000Ac. return s0;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap.newValueIterator()Ljava.util.Iterator;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 4
    @GenericSignature "()Ljava/util/Iterator<TV;>;"
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.newValueIterator()Ljava.util.Iterator;" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := new (|java.util.HashMap$ValueIterator|);
    #L00000Ab. call s1  := {|java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @ClassDescriptor (|java.util.HashMap$ValueIterator|) @Type special;
    #L00000Ac. return s0;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap.newEntryIterator()Ljava.util.Iterator;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 4
    @GenericSignature "()Ljava/util/Iterator<Ljava/util/Map$Entry<TK;TV;>;>;"
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.newEntryIterator()Ljava.util.Iterator;" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := new (|java.util.HashMap$EntryIterator|);
    #L00000Ab. call s1  := {|java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @ClassDescriptor (|java.util.HashMap$EntryIterator|) @Type special;
    #L00000Ac. return s0;
  }
  procedure (|java.util.Set|) {|java.util.HashMap.keySet()Ljava.util.Set;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 5
    @GenericSignature "()Ljava/util/Set<TK;>;"
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.keySet()Ljava.util.Set;" 
  {
    local jmp;
    s0;
    s1;
    [|v1|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.keySet|> @Type (|java.util.Set|);
    #L00000Ab. [|v1|] := s0 @Type (|java.util.Set|);
    #L00001Aa. if [|v1|] == null then goto L00002Aa;
    #L00001Ab. jmp := [|v1|];
    #L00001Ac. goto L00003Aa;
    #L00002Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002Ab. s0 := new (|java.util.HashMap$KeySet|);
    #L00002Ac. call s1  := {|java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @ClassDescriptor (|java.util.HashMap$KeySet|) @Type special;
    #L00002Ad. [|v0|].<|java.util.HashMap.keySet|> := s0 @Type (|java.util.Set|);
    #L00002Ae. jmp := s0;
    #L00003Aa. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003Ab. return jmp;
  }
  procedure (|java.util.Collection|) {|java.util.HashMap.values()Ljava.util.Collection;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 5
    @GenericSignature "()Ljava/util/Collection<TV;>;"
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.values()Ljava.util.Collection;" 
  {
    local jmp;
    s0;
    s1;
    [|v1|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.values|> @Type (|java.util.Collection|);
    #L00000Ab. [|v1|] := s0 @Type (|java.util.Collection|);
    #L00001Aa. if [|v1|] == null then goto L00002Aa;
    #L00001Ab. jmp := [|v1|];
    #L00001Ac. goto L00003Aa;
    #L00002Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002Ab. s0 := new (|java.util.HashMap$Values|);
    #L00002Ac. call s1  := {|java.util.HashMap$Values.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @ClassDescriptor (|java.util.HashMap$Values|) @Type special;
    #L00002Ad. [|v0|].<|java.util.HashMap.values|> := s0 @Type (|java.util.Collection|);
    #L00002Ae. jmp := s0;
    #L00003Aa. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003Ab. return jmp;
  }
  procedure (|java.util.Set|) {|java.util.HashMap.entrySet()Ljava.util.Set;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;"
    @Owner (|java.util.HashMap|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap.entrySet()Ljava.util.Set;" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap.entrySet0()Ljava.util.Set;|}([|v0|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00000Ab. return s0;
  }
  procedure (|java.util.Set|) {|java.util.HashMap.entrySet0()Ljava.util.Set;|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 5
    @GenericSignature "()Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;"
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.entrySet0()Ljava.util.Set;" 
  {
    local jmp;
    s0;
    s1;
    [|v1|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.entrySet|> @Type (|java.util.Set|);
    #L00000Ab. [|v1|] := s0 @Type (|java.util.Set|);
    #L00001Aa. if [|v1|] == null then goto L00002Aa;
    #L00001Ab. jmp := [|v1|];
    #L00001Ac. goto L00003Aa;
    #L00002Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00002Ab. s0 := new (|java.util.HashMap$EntrySet|);
    #L00002Ac. call s1  := {|java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|}(s0,[|v0|],null) @ClassDescriptor (|java.util.HashMap$EntrySet|) @Type special;
    #L00002Ad. [|v0|].<|java.util.HashMap.entrySet|> := s0 @Type (|java.util.Set|);
    #L00002Ae. jmp := s0;
    #L00003Aa. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003Ab. return jmp;
  }
  procedure (|void|) {|java.util.HashMap.writeObject(Ljava.io.ObjectOutputStream;)V|} ((|java.util.HashMap|) [|v0|], (|java.io.ObjectOutputStream|) [|v1|]) 
    @Throws [|java.io.IOException|]
    @MaxLocals 4
    @MaxStack 2
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.writeObject(Ljava.io.ObjectOutputStream;)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v2|];
    [|v3|];

    #L00000Aa. call s0  := {|java.io.ObjectOutputStream.defaultWriteObject()V|}([|v1|]) @ClassDescriptor (|java.io.ObjectOutputStream|) @Type virtual;
    #L00001Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00001Ab. s1 := +|java.util.HashMap.EMPTY_TABLE|+ @Type (|java.util.HashMap$Entry[]|);
    #L00001Ac. if s0 != s1 then goto L00002Aa;
    #L00003Aa. s0 := [|v0|].<|java.util.HashMap.threshold|> @Type (|int|);
    #L00003Ab. call s1  := {|java.util.HashMap.roundUpToPowerOf2(I)I|}(s0) @ClassDescriptor (|java.util.HashMap|) @Type direct;
    #L00003Ac. call s2  := {|java.io.ObjectOutputStream.writeInt(I)V|}([|v1|],s1) @ClassDescriptor (|java.io.ObjectOutputStream|) @Type virtual;
    #L00003Ad. goto L00004Aa;
    #L00002Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00002Ab. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00002Ac. call s1  := {|java.io.ObjectOutputStream.writeInt(I)V|}([|v1|],s0.length) @ClassDescriptor (|java.io.ObjectOutputStream|) @Type virtual;
    #L00004Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00004Ab. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00004Ac. call s1  := {|java.io.ObjectOutputStream.writeInt(I)V|}([|v1|],s0) @ClassDescriptor (|java.io.ObjectOutputStream|) @Type virtual;
    #L00005Aa. s0 := [|v0|].<|java.util.HashMap.size|> @Type (|int|);
    #L00005Ab. if s0 <= 0 then goto L00006Aa;
    #L00007Aa. call s0  := {|java.util.HashMap.entrySet0()Ljava.util.Set;|}([|v0|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00007Ab. call s1  := {|java.util.Set.iterator()Ljava.util.Iterator;|}(s0) @ClassDescriptor (|java.util.Set|) @Type interface;
    #L00007Ac. [|v2|] := s1 @Type (|java.lang.Object|);
    #L00008Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00008Ab. call s0  := {|java.util.Iterator.hasNext()Z|}([|v2|]) @ClassDescriptor (|java.util.Iterator|) @Type interface;
    #L00008Ac. if s0 == 0 then goto L00006Aa;
    #L00008Ad. call s1  := {|java.util.Iterator.next()Ljava.lang.Object;|}([|v2|]) @ClassDescriptor (|java.util.Iterator|) @Type interface;
    #L00008Ae. [|v3|] := ((|java.util.Map$Entry|)) s1 @Type (|java.util.Map$Entry|);
    #L00009Aa. call s0  := {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v3|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00009Ab. call s1  := {|java.io.ObjectOutputStream.writeObject(Ljava.lang.Object;)V|}([|v1|],s0) @ClassDescriptor (|java.io.ObjectOutputStream|) @Type virtual;
    #L00010Aa. call s0  := {|java.util.Map$Entry.getValue()Ljava.lang.Object;|}([|v3|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00010Ab. call s1  := {|java.io.ObjectOutputStream.writeObject(Ljava.lang.Object;)V|}([|v1|],s0) @ClassDescriptor (|java.io.ObjectOutputStream|) @Type virtual;
    #L00011Aa. goto L00008Aa;
    #L00006Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006Ab. return @void;
  }
  procedure (|void|) {|java.util.HashMap.readObject(Ljava.io.ObjectInputStream;)V|} ((|java.util.HashMap|) [|v0|], (|java.io.ObjectInputStream|) [|v1|]) 
    @Throws [|java.io.IOException|],[|java.lang.ClassNotFoundException|]
    @MaxLocals 7
    @MaxStack 4
    @Owner (|java.util.HashMap|)
    @Access (PRIVATE)
    @Desc "java.util.HashMap.readObject(Ljava.io.ObjectInputStream;)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    s3;
    s4;
    s5;
    s6;
    s7;
    [|v2|];
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];

    #L00000Aa. call s0  := {|java.io.ObjectInputStream.defaultReadObject()V|}([|v1|]) @ClassDescriptor (|java.io.ObjectInputStream|) @Type virtual;
    #L00001Aa. s0 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00001Ab. s1 := fcmpg(0.0,s0);
    #L00001Ac. if s1 <= 0 then goto L00002Aa;
    #L00001Ad. s2 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00001Ae. call s3  := {|java.lang.Float.isNaN(F)Z|}(s2) @ClassDescriptor (|java.lang.Float|) @Type direct;
    #L00001Af. if s3 == 0 then goto L00003Aa;
    #L00002Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00002Ab. s0 := new (|java.io.InvalidObjectException|);
    #L00002Ac. s1 := new (|java.lang.StringBuilder|);
    #L00002Ad. call s2  := {|java.lang.StringBuilder.<init>()V|}(s1) @ClassDescriptor (|java.lang.StringBuilder|) @Type special;
    #L00002Ae. call s3  := {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s1,"Illegal load factor: ") @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00002Af. s4 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00002Ag. call s5  := {|java.lang.StringBuilder.append(F)Ljava.lang.StringBuilder;|}(s3,s4) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00002Ah. call s6  := {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s5) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00002Ai. call s7  := {|java.io.InvalidObjectException.<init>(Ljava.lang.String;)V|}(s0,s6) @ClassDescriptor (|java.io.InvalidObjectException|) @Type special;
    #L00002Aj. throw s0;
    #L00003Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00003Ab. s0 := +|java.util.HashMap.EMPTY_TABLE|+ @Type (|java.util.HashMap$Entry[]|);
    #L00003Ac. [|v0|].<|java.util.HashMap.table|> := ((|[Ljava.util.HashMap$Entry;|)) s0 @Type (|java.util.HashMap$Entry[]|);
    #L00004Aa. call s0  := {|java.io.ObjectInputStream.readInt()I|}([|v1|]) @ClassDescriptor (|java.io.ObjectInputStream|) @Type virtual;
    #L00005Aa. call s0  := {|java.io.ObjectInputStream.readInt()I|}([|v1|]) @ClassDescriptor (|java.io.ObjectInputStream|) @Type virtual;
    #L00005Ab. [|v2|] := s0 @Type (|java.lang.Object|);
    #L00006Aa. if [|v2|] >= 0 then goto L00007Aa;
    #L00008Aa. s0 := new (|java.io.InvalidObjectException|);
    #L00008Ab. s1 := new (|java.lang.StringBuilder|);
    #L00008Ac. call s2  := {|java.lang.StringBuilder.<init>()V|}(s1) @ClassDescriptor (|java.lang.StringBuilder|) @Type special;
    #L00008Ad. call s3  := {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s1,"Illegal mappings count: ") @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00008Ae. call s4  := {|java.lang.StringBuilder.append(I)Ljava.lang.StringBuilder;|}(s3,[|v2|]) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00008Af. call s5  := {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s4) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00008Ag. call s6  := {|java.io.InvalidObjectException.<init>(Ljava.lang.String;)V|}(s0,s5) @ClassDescriptor (|java.io.InvalidObjectException|) @Type special;
    #L00008Ah. throw s0;
    #L00007Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00007Ab. s0 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00007Ac. call s1  := {|java.lang.Math.min(FF)F|}((1.0/s0),4.0) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00007Ad. call s2  := {|java.lang.Math.min(FF)F|}((((|float|))[|v2|]*s1),1.07374182E9) @ClassDescriptor (|java.lang.Math|) @Type direct;
    #L00007Ae. [|v3|] := ((|int|))s2 @Type (|int|);
    #L00009Aa. if [|v2|] <= 0 then goto L00010Aa;
    #L00011Aa. call s0  := {|java.util.HashMap.inflateTable(I)V|}([|v0|],[|v3|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00011Ab. goto L00012Aa;
    #L00010Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00010Ab. [|v0|].<|java.util.HashMap.threshold|> := [|v3|] @Type (|int|);
    #L00012Aa. <@Frame (@Same, 0, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00012Ab. call s0  := {|java.util.HashMap.init()V|}([|v0|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00013Aa. [|v4|] := 0 @Type (|int|);
    #L00014Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00014Ab. if [|v4|] >= [|v2|] then goto L00015Aa;
    #L00016Aa. call s0  := {|java.io.ObjectInputStream.readObject()Ljava.lang.Object;|}([|v1|]) @ClassDescriptor (|java.io.ObjectInputStream|) @Type virtual;
    #L00016Ab. [|v5|] := s0 @Type (|java.lang.Object|);
    #L00017Aa. call s0  := {|java.io.ObjectInputStream.readObject()Ljava.lang.Object;|}([|v1|]) @ClassDescriptor (|java.io.ObjectInputStream|) @Type virtual;
    #L00017Ab. [|v6|] := s0 @Type (|java.lang.Object|);
    #L00018Aa. call s0  := {|java.util.HashMap.putForCreate(Ljava.lang.Object;Ljava.lang.Object;)V|}([|v0|],[|v5|],[|v6|]) @ClassDescriptor (|java.util.HashMap|) @Type special;
    #L00019Aa. [|v4|] := [|v4|] + 1 @Type (|int|);
    #L00019Ab. goto L00014Aa;
    #L00015Aa. <@Frame (@Chop, 1, `[(|int|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00015Ab. return @void;
  }
  procedure (|int|) {|java.util.HashMap.capacity()I|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.capacity()I" 
  {
    local jmp;
    s0;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00000Ab. return s0.length;
  }
  procedure (|float|) {|java.util.HashMap.loadFactor()F|} ((|java.util.HashMap|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access ()
    @Desc "java.util.HashMap.loadFactor()F" 
  {
    local jmp;
    s0;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap.loadFactor|> @Type (|float|);
    #L00000Ab. return s0;
  }
  procedure (|void|) {|java.util.HashMap.<clinit>()V|} () 
    @MaxLocals 0
    @MaxStack 1
    @Owner (|java.util.HashMap|)
    @Access (STATIC)
    @Desc "java.util.HashMap.<clinit>()V" 
  {
    local jmp;
    s0;

    #L00000Aa. s0 := new (|java.util.HashMap$Entry|)[0];
    #L00000Ab. +|java.util.HashMap.EMPTY_TABLE|+ := s0 @Type (|java.util.HashMap$Entry[]|);
    #L00000Ac. return @void;
  }

record (|java.util.HashMap$1|)
    @OuterClass java/util/HashMap
    @Source "HashMap.java"
    @Type class
    @AccessFlag (SYNTHETIC)
    @InnerClass (
      @Name (|java.util.HashMap$1|), 
      @OuterName (|java.util.HashMap|), 
      @AccessFlag (STATIC,SYNTHETIC)
     ) 
  extends 
    (|java.lang.Object|) 
{
}



record (|java.util.HashMap$EntrySet|)
    @Source "HashMap.java"
    @GenericSignature "Ljava/util/AbstractSet<Ljava/util/Map$Entry<TK;TV;>;>;"
    @Type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.AbstractSet|) 
{
  (|java.util.HashMap|) <|HashMap$EntrySet.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$EntrySet|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Desc "java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. [|v0|].<|java.util.HashMap$EntrySet.this$0|> := [|v1|] @Type (|java.util.HashMap|);
    #L00000Ab. call s0  := {|java.util.AbstractSet.<init>()V|}([|v0|]) @ClassDescriptor (|java.util.AbstractSet|) @Type special;
    #L00000Ac. return @void;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap$EntrySet.iterator()Ljava.util.Iterator;|} ((|java.util.HashMap$EntrySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()Ljava/util/Iterator<Ljava/util/Map$Entry<TK;TV;>;>;"
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$EntrySet.iterator()Ljava.util.Iterator;" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$EntrySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.newEntryIterator()Ljava.util.Iterator;|}(s0) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ac. return s1;
  }
  procedure (|boolean|) {|java.util.HashMap$EntrySet.contains(Ljava.lang.Object;)Z|} ((|java.util.HashMap$EntrySet|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 4
    @MaxStack 2
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$EntrySet.contains(Ljava.lang.Object;)Z" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v2|];
    [|v3|];

    #L00000Aa. s0 := instanceof @varname [|v1|] @Type "(|java.util.Map$Entry|)";
    #L00000Ab. if s0 != 0 then goto L00001Aa;
    #L00002Aa. return 0;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. [|v2|] := ((|java.util.Map$Entry|)) [|v1|] @Type (|java.util.Map$Entry|);
    #L00003Aa. s0 := [|v0|].<|java.util.HashMap$EntrySet.this$0|> @Type (|java.util.HashMap|);
    #L00003Ab. call s1  := {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v2|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00003Ac. call s2  := {|java.util.HashMap.getEntry(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}(s0,s1) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00003Ad. [|v3|] := s2 @Type (|java.lang.Object|);
    #L00004Aa. if [|v3|] == null then goto L00005Aa;
    #L00004Ab. call s0  := {|java.util.HashMap$Entry.equals(Ljava.lang.Object;)Z|}([|v3|],[|v2|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00004Ac. if s0 == 0 then goto L00005Aa;
    #L00004Ad. jmp := 1;
    #L00004Ae. goto L00006Aa;
    #L00005Aa. <@Frame (@Append, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00005Ab. jmp := 0;
    #L00006Aa. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00006Ab. return jmp;
  }
  procedure (|boolean|) {|java.util.HashMap$EntrySet.remove(Ljava.lang.Object;)Z|} ((|java.util.HashMap$EntrySet|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$EntrySet.remove(Ljava.lang.Object;)Z" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$EntrySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.removeMapping(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}(s0,[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ac. if s1 == null then goto L00001Aa;
    #L00000Ad. jmp := 1;
    #L00000Ae. goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. jmp := 0;
    #L00002Aa. <@Frame (@Same1, 0, `[(|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002Ab. return jmp;
  }
  procedure (|int|) {|java.util.HashMap$EntrySet.size()I|} ((|java.util.HashMap$EntrySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$EntrySet.size()I" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$EntrySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. s1 := s0.<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ac. return s1;
  }
  procedure (|void|) {|java.util.HashMap$EntrySet.clear()V|} ((|java.util.HashMap$EntrySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$EntrySet.clear()V" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$EntrySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.clear()V|}(s0) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00001Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$EntrySet|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$EntrySet|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Desc "java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap$EntrySet.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$EntrySet|) @Type special;
    #L00000Ab. return @void;
  }

record (|java.util.HashMap$Values|)
    @Source "HashMap.java"
    @GenericSignature "Ljava/util/AbstractCollection<TV;>;"
    @Type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Values|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Values, 
      @AccessFlag (PRIVATE,FINAL)
     ) 
  extends 
    (|java.util.AbstractCollection|) 
{
  (|java.util.HashMap|) <|HashMap$Values.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$Values.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$Values|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$Values|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Desc "java.util.HashMap$Values.<init>(Ljava.util.HashMap;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. [|v0|].<|java.util.HashMap$Values.this$0|> := [|v1|] @Type (|java.util.HashMap|);
    #L00000Ab. call s0  := {|java.util.AbstractCollection.<init>()V|}([|v0|]) @ClassDescriptor (|java.util.AbstractCollection|) @Type special;
    #L00000Ac. return @void;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap$Values.iterator()Ljava.util.Iterator;|} ((|java.util.HashMap$Values|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()Ljava/util/Iterator<TV;>;"
    @Owner (|java.util.HashMap$Values|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$Values.iterator()Ljava.util.Iterator;" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$Values.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.newValueIterator()Ljava.util.Iterator;|}(s0) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ac. return s1;
  }
  procedure (|int|) {|java.util.HashMap$Values.size()I|} ((|java.util.HashMap$Values|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Values|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$Values.size()I" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$Values.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. s1 := s0.<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ac. return s1;
  }
  procedure (|boolean|) {|java.util.HashMap$Values.contains(Ljava.lang.Object;)Z|} ((|java.util.HashMap$Values|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$Values|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$Values.contains(Ljava.lang.Object;)Z" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$Values.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.containsValue(Ljava.lang.Object;)Z|}(s0,[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ac. return s1;
  }
  procedure (|void|) {|java.util.HashMap$Values.clear()V|} ((|java.util.HashMap$Values|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Values|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$Values.clear()V" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$Values.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.clear()V|}(s0) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00001Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap$Values.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$Values|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$Values|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Desc "java.util.HashMap$Values.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap$Values.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$Values|) @Type special;
    #L00000Ab. return @void;
  }

record (|java.util.HashMap$KeySet|)
    @Source "HashMap.java"
    @GenericSignature "Ljava/util/AbstractSet<TK;>;"
    @Type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.AbstractSet|) 
{
  (|java.util.HashMap|) <|HashMap$KeySet.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$KeySet|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Desc "java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. [|v0|].<|java.util.HashMap$KeySet.this$0|> := [|v1|] @Type (|java.util.HashMap|);
    #L00000Ab. call s0  := {|java.util.AbstractSet.<init>()V|}([|v0|]) @ClassDescriptor (|java.util.AbstractSet|) @Type special;
    #L00000Ac. return @void;
  }
  procedure (|java.util.Iterator|) {|java.util.HashMap$KeySet.iterator()Ljava.util.Iterator;|} ((|java.util.HashMap$KeySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()Ljava/util/Iterator<TK;>;"
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$KeySet.iterator()Ljava.util.Iterator;" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$KeySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.newKeyIterator()Ljava.util.Iterator;|}(s0) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ac. return s1;
  }
  procedure (|int|) {|java.util.HashMap$KeySet.size()I|} ((|java.util.HashMap$KeySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$KeySet.size()I" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$KeySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. s1 := s0.<|java.util.HashMap.size|> @Type (|int|);
    #L00000Ac. return s1;
  }
  procedure (|boolean|) {|java.util.HashMap$KeySet.contains(Ljava.lang.Object;)Z|} ((|java.util.HashMap$KeySet|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$KeySet.contains(Ljava.lang.Object;)Z" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$KeySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.containsKey(Ljava.lang.Object;)Z|}(s0,[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ac. return s1;
  }
  procedure (|boolean|) {|java.util.HashMap$KeySet.remove(Ljava.lang.Object;)Z|} ((|java.util.HashMap$KeySet|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$KeySet.remove(Ljava.lang.Object;)Z" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$KeySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}(s0,[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00000Ac. if s1 == null then goto L00001Aa;
    #L00000Ad. jmp := 1;
    #L00000Ae. goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. jmp := 0;
    #L00002Aa. <@Frame (@Same1, 0, `[(|top|), (|top|)], 1, `[(|int|), (|top|)])>
    #L00002Ab. return jmp;
  }
  procedure (|void|) {|java.util.HashMap$KeySet.clear()V|} ((|java.util.HashMap$KeySet|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$KeySet|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$KeySet.clear()V" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$KeySet.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. call s1  := {|java.util.HashMap.clear()V|}(s0) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00001Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$KeySet|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$KeySet|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Desc "java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap$KeySet.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$KeySet|) @Type special;
    #L00000Ab. return @void;
  }

record (|java.util.HashMap$EntryIterator|)
    @Source "HashMap.java"
    @GenericSignature "Ljava/util/HashMap<TK;TV;>.HashIterator<Ljava/util/Map$Entry<TK;TV;>;>;"
    @Type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.HashMap$HashIterator|) 
{
  (|java.util.HashMap|) <|HashMap$EntryIterator.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$EntryIterator|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$EntryIterator|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Desc "java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. [|v0|].<|java.util.HashMap$EntryIterator.this$0|> := [|v1|] @Type (|java.util.HashMap|);
    #L00000Ab. call s0  := {|java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$HashIterator|) @Type special;
    #L00000Ac. return @void;
  }
  procedure (|java.util.Map$Entry|) {|java.util.HashMap$EntryIterator.next()Ljava.util.Map$Entry;|} ((|java.util.HashMap$EntryIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()Ljava/util/Map$Entry<TK;TV;>;"
    @Owner (|java.util.HashMap$EntryIterator|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$EntryIterator.next()Ljava.util.Map$Entry;" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap$EntryIterator.nextEntry()Ljava.util.HashMap$Entry;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$EntryIterator|) @Type virtual;
    #L00000Ab. return s0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$EntryIterator.next()Ljava.lang.Object;|} ((|java.util.HashMap$EntryIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$EntryIterator|)
    @Access (PUBLIC,SYNTHETIC,VOLATILE)
    @Desc "java.util.HashMap$EntryIterator.next()Ljava.lang.Object;" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap$EntryIterator.next()Ljava.util.Map$Entry;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$EntryIterator|) @Type virtual;
    #L00000Ab. return s0;
  }
  procedure (|void|) {|java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$EntryIterator|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$EntryIterator|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Desc "java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap$EntryIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$EntryIterator|) @Type special;
    #L00000Ab. return @void;
  }

record (|java.util.HashMap$KeyIterator|)
    @Source "HashMap.java"
    @GenericSignature "Ljava/util/HashMap<TK;TV;>.HashIterator<TK;>;"
    @Type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.HashMap$HashIterator|) 
{
  (|java.util.HashMap|) <|HashMap$KeyIterator.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$KeyIterator|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$KeyIterator|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Desc "java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. [|v0|].<|java.util.HashMap$KeyIterator.this$0|> := [|v1|] @Type (|java.util.HashMap|);
    #L00000Ab. call s0  := {|java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$HashIterator|) @Type special;
    #L00000Ac. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$KeyIterator.next()Ljava.lang.Object;|} ((|java.util.HashMap$KeyIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()TK;"
    @Owner (|java.util.HashMap$KeyIterator|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$KeyIterator.next()Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. call s0  := {|java.util.HashMap$KeyIterator.nextEntry()Ljava.util.HashMap$Entry;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$KeyIterator|) @Type virtual;
    #L00000Ab. call s1  := {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|}(s0) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00000Ac. return s1;
  }
  procedure (|void|) {|java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$KeyIterator|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$KeyIterator|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Desc "java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap$KeyIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$KeyIterator|) @Type special;
    #L00000Ab. return @void;
  }

record (|java.util.HashMap$ValueIterator|)
    @Source "HashMap.java"
    @GenericSignature "Ljava/util/HashMap<TK;TV;>.HashIterator<TV;>;"
    @Type class
    @AccessFlag (FINAL)
    @InnerClass (
      @Name (|java.util.HashMap$Entry|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Entry, 
      @AccessFlag (STATIC)
     ) 
  extends 
    (|java.util.HashMap$HashIterator|) 
{
  (|java.util.HashMap|) <|HashMap$ValueIterator.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$ValueIterator|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$ValueIterator|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Desc "java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. [|v0|].<|java.util.HashMap$ValueIterator.this$0|> := [|v1|] @Type (|java.util.HashMap|);
    #L00000Ab. call s0  := {|java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$HashIterator|) @Type special;
    #L00000Ac. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$ValueIterator.next()Ljava.lang.Object;|} ((|java.util.HashMap$ValueIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()TV;"
    @Owner (|java.util.HashMap$ValueIterator|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$ValueIterator.next()Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    s1;

    #L00000Aa. call s0  := {|java.util.HashMap$ValueIterator.nextEntry()Ljava.util.HashMap$Entry;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$ValueIterator|) @Type virtual;
    #L00000Ab. s1 := s0.<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00000Ac. return s1;
  }
  procedure (|void|) {|java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V|} ((|java.util.HashMap$ValueIterator|) [|v0|], (|java.util.HashMap|) [|v1|], (|java.util.HashMap$1|) [|v2|]) 
    @MaxLocals 3
    @MaxStack 2
    @Owner (|java.util.HashMap$ValueIterator|)
    @Access (SYNTHETIC,CONSTRUCTOR)
    @Desc "java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;Ljava.util.HashMap$1;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.util.HashMap$ValueIterator.<init>(Ljava.util.HashMap;)V|}([|v0|],[|v1|]) @ClassDescriptor (|java.util.HashMap$ValueIterator|) @Type special;
    #L00000Ab. return @void;
  }

record (|java.util.HashMap$HashIterator|)
    @Source "HashMap.java"
    @GenericSignature "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TE;>;"
    @Type class
    @AccessFlag ()
    @InnerClass (
      @Name (|java.util.HashMap$HashIterator|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName HashIterator, 
      @AccessFlag (PRIVATE)
     ) 
  extends 
    (|java.lang.Object|) 
{
  (|java.util.HashMap$Entry|) <|HashMap$HashIterator.next|> @GenericSignature "Ljava/util/HashMap$Entry<TK;TV;>;" @AccessFlag ();
  (|int|) <|HashMap$HashIterator.expectedModCount|> @AccessFlag ();
  (|int|) <|HashMap$HashIterator.index|> @AccessFlag ();
  (|java.util.HashMap$Entry|) <|HashMap$HashIterator.current|> @GenericSignature "Ljava/util/HashMap$Entry<TK;TV;>;" @AccessFlag ();
  (|java.util.HashMap|) <|HashMap$HashIterator.this$0|> @AccessFlag (FINAL,SYNTHETIC);
}

  procedure (|void|) {|java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V|} ((|java.util.HashMap$HashIterator|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 6
    @Owner (|java.util.HashMap$HashIterator|)
    @Access (CONSTRUCTOR)
    @Desc "java.util.HashMap$HashIterator.<init>(Ljava.util.HashMap;)V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v2|];

    #L00000Aa. [|v0|].<|java.util.HashMap$HashIterator.this$0|> := [|v1|] @Type (|java.util.HashMap|);
    #L00000Ab. call s0  := {|java.lang.Object.<init>()V|}([|v0|]) @ClassDescriptor (|java.lang.Object|) @Type special;
    #L00001Aa. s0 := [|v1|].<|java.util.HashMap.modCount|> @Type (|int|);
    #L00001Ab. [|v0|].<|java.util.HashMap$HashIterator.expectedModCount|> := s0 @Type (|int|);
    #L00002Aa. s0 := [|v1|].<|java.util.HashMap.size|> @Type (|int|);
    #L00002Ab. if s0 <= 0 then goto L00003Aa;
    #L00004Aa. s0 := [|v1|].<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00004Ab. [|v2|] := s0 @Type (|java.util.HashMap$Entry[]|);
    #L00005Aa. <@Frame (@Full, 3, `[(|java.lang.Object|), (|java.lang.Object|), (|java.util.HashMap$Entry[]|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00005Ab. s0 := [|v0|].<|java.util.HashMap$HashIterator.index|> @Type (|int|);
    #L00005Ac. if s0 >= [|v2|].length then goto L00003Aa;
    #L00005Ad. s1 := [|v0|].<|java.util.HashMap$HashIterator.index|> @Type (|int|);
    #L00005Ae. [|v0|].<|java.util.HashMap$HashIterator.index|> := (s1+1) @Type (|int|);
    #L00005Af. s2 := [|v2|][s1];
    #L00005Ag. [|v0|].<|java.util.HashMap$HashIterator.next|> := s2 @Type (|java.util.HashMap$Entry|);
    #L00005Ah. if s2 != null then goto L00003Aa;
    #L00006Aa. goto L00005Aa;
    #L00003Aa. <@Frame (@Chop, 1, `[(|java.lang.Object|), (|java.lang.Object|), (|java.util.HashMap$Entry[]|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00003Ab. return @void;
  }
  procedure (|boolean|) {|java.util.HashMap$HashIterator.hasNext()Z|} ((|java.util.HashMap$HashIterator|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$HashIterator|)
    @Access (PUBLIC,FINAL)
    @Desc "java.util.HashMap$HashIterator.hasNext()Z" 
  {
    local jmp;
    s0;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$HashIterator.next|> @Type (|java.util.HashMap$Entry|);
    #L00000Ab. if s0 == null then goto L00001Aa;
    #L00000Ac. jmp := 1;
    #L00000Ad. goto L00002Aa;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|)], 0, `[(|top|)])>
    #L00001Ab. jmp := 0;
    #L00002Aa. <@Frame (@Same1, 0, `[(|top|)], 1, `[(|int|)])>
    #L00002Ab. return jmp;
  }
  procedure (|java.util.HashMap$Entry|) {|java.util.HashMap$HashIterator.nextEntry()Ljava.util.HashMap$Entry;|} ((|java.util.HashMap$HashIterator|) [|v0|]) 
    @MaxLocals 3
    @MaxStack 6
    @GenericSignature "()Ljava/util/HashMap$Entry<TK;TV;>;"
    @Owner (|java.util.HashMap$HashIterator|)
    @Access (FINAL)
    @Desc "java.util.HashMap$HashIterator.nextEntry()Ljava.util.HashMap$Entry;" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v1|];
    [|v2|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$HashIterator.this$0|> @Type (|java.util.HashMap|);
    #L00000Ab. s1 := s0.<|java.util.HashMap.modCount|> @Type (|int|);
    #L00000Ac. s2 := [|v0|].<|java.util.HashMap$HashIterator.expectedModCount|> @Type (|int|);
    #L00000Ad. if s1 == s2 then goto L00001Aa;
    #L00002Aa. s0 := new (|java.util.ConcurrentModificationException|);
    #L00002Ab. call s1  := {|java.util.ConcurrentModificationException.<init>()V|}(s0) @ClassDescriptor (|java.util.ConcurrentModificationException|) @Type special;
    #L00002Ac. throw s0;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00001Ab. s0 := [|v0|].<|java.util.HashMap$HashIterator.next|> @Type (|java.util.HashMap$Entry|);
    #L00001Ac. [|v1|] := s0 @Type (|java.util.HashMap$Entry|);
    #L00003Aa. if [|v1|] != null then goto L00004Aa;
    #L00005Aa. s0 := new (|java.util.NoSuchElementException|);
    #L00005Ab. call s1  := {|java.util.NoSuchElementException.<init>()V|}(s0) @ClassDescriptor (|java.util.NoSuchElementException|) @Type special;
    #L00005Ac. throw s0;
    #L00004Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00004Ab. s0 := [|v1|].<|java.util.HashMap$Entry.next|> @Type (|java.util.HashMap$Entry|);
    #L00004Ac. [|v0|].<|java.util.HashMap$HashIterator.next|> := s0 @Type (|java.util.HashMap$Entry|);
    #L00004Ad. if s0 != null then goto L00006Aa;
    #L00007Aa. s0 := [|v0|].<|java.util.HashMap$HashIterator.this$0|> @Type (|java.util.HashMap|);
    #L00007Ab. s1 := s0.<|java.util.HashMap.table|> @Type (|java.util.HashMap$Entry[]|);
    #L00007Ac. [|v2|] := s1 @Type (|java.util.HashMap$Entry[]|);
    #L00008Aa. <@Frame (@Append, 1, `[(|java.util.HashMap$Entry[]|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00008Ab. s0 := [|v0|].<|java.util.HashMap$HashIterator.index|> @Type (|int|);
    #L00008Ac. if s0 >= [|v2|].length then goto L00006Aa;
    #L00008Ad. s1 := [|v0|].<|java.util.HashMap$HashIterator.index|> @Type (|int|);
    #L00008Ae. [|v0|].<|java.util.HashMap$HashIterator.index|> := (s1+1) @Type (|int|);
    #L00008Af. s2 := [|v2|][s1];
    #L00008Ag. [|v0|].<|java.util.HashMap$HashIterator.next|> := s2 @Type (|java.util.HashMap$Entry|);
    #L00008Ah. if s2 != null then goto L00006Aa;
    #L00009Aa. goto L00008Aa;
    #L00006Aa. <@Frame (@Chop, 1, `[(|java.util.HashMap$Entry[]|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|)])>
    #L00006Ab. [|v0|].<|java.util.HashMap$HashIterator.current|> := [|v1|] @Type (|java.util.HashMap$Entry|);
    #L00010Aa. return [|v1|];
  }
  procedure (|void|) {|java.util.HashMap$HashIterator.remove()V|} ((|java.util.HashMap$HashIterator|) [|v0|]) 
    @MaxLocals 2
    @MaxStack 2
    @Owner (|java.util.HashMap$HashIterator|)
    @Access (PUBLIC)
    @Desc "java.util.HashMap$HashIterator.remove()V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v1|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$HashIterator.current|> @Type (|java.util.HashMap$Entry|);
    #L00000Ab. if s0 != null then goto L00001Aa;
    #L00002Aa. s0 := new (|java.lang.IllegalStateException|);
    #L00002Ab. call s1  := {|java.lang.IllegalStateException.<init>()V|}(s0) @ClassDescriptor (|java.lang.IllegalStateException|) @Type special;
    #L00002Ac. throw s0;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. s0 := [|v0|].<|java.util.HashMap$HashIterator.this$0|> @Type (|java.util.HashMap|);
    #L00001Ac. s1 := s0.<|java.util.HashMap.modCount|> @Type (|int|);
    #L00001Ad. s2 := [|v0|].<|java.util.HashMap$HashIterator.expectedModCount|> @Type (|int|);
    #L00001Ae. if s1 == s2 then goto L00003Aa;
    #L00004Aa. s0 := new (|java.util.ConcurrentModificationException|);
    #L00004Ab. call s1  := {|java.util.ConcurrentModificationException.<init>()V|}(s0) @ClassDescriptor (|java.util.ConcurrentModificationException|) @Type special;
    #L00004Ac. throw s0;
    #L00003Aa. <@Frame (@Same, 0, `[(|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00003Ab. s0 := [|v0|].<|java.util.HashMap$HashIterator.current|> @Type (|java.util.HashMap$Entry|);
    #L00003Ac. s1 := s0.<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00003Ad. [|v1|] := s1 @Type (|java.lang.Object|);
    #L00005Aa. [|v0|].<|java.util.HashMap$HashIterator.current|> := null @Type (|java.util.HashMap$Entry|);
    #L00006Aa. s0 := [|v0|].<|java.util.HashMap$HashIterator.this$0|> @Type (|java.util.HashMap|);
    #L00006Ab. call s1  := {|java.util.HashMap.removeEntryForKey(Ljava.lang.Object;)Ljava.util.HashMap$Entry;|}(s0,[|v1|]) @ClassDescriptor (|java.util.HashMap|) @Type virtual;
    #L00007Aa. s0 := [|v0|].<|java.util.HashMap$HashIterator.this$0|> @Type (|java.util.HashMap|);
    #L00007Ab. s1 := s0.<|java.util.HashMap.modCount|> @Type (|int|);
    #L00007Ac. [|v0|].<|java.util.HashMap$HashIterator.expectedModCount|> := s1 @Type (|int|);
    #L00008Aa. return @void;
  }

record (|java.util.HashMap$Entry|)
    @Source "HashMap.java"
    @GenericSignature "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map$Entry<TK;TV;>;"
    @Type class
    @AccessFlag ()
    @InnerClass (
      @Name (|java.util.Map$Entry|), 
      @OuterName (|java.util.Map|), 
      @InnerName Entry, 
      @AccessFlag (PUBLIC,INTERFACE,STATIC)
     ) 
  extends 
    (|java.lang.Object|) 
{
  (|java.lang.Object|) <|HashMap$Entry.key|> @GenericSignature "TK;" @AccessFlag (FINAL);
  (|java.lang.Object|) <|HashMap$Entry.value|> @GenericSignature "TV;" @AccessFlag ();
  (|java.util.HashMap$Entry|) <|HashMap$Entry.next|> @GenericSignature "Ljava/util/HashMap$Entry<TK;TV;>;" @AccessFlag ();
  (|int|) <|HashMap$Entry.hash|> @AccessFlag ();
}

  procedure (|void|) {|java.util.HashMap$Entry.<init>(ILjava.lang.Object;Ljava.lang.Object;Ljava.util.HashMap$Entry;)V|} ((|java.util.HashMap$Entry|) [|v0|], (|int|) [|v1|], (|java.lang.Object|) [|v2|], (|java.lang.Object|) [|v3|], (|java.util.HashMap$Entry|) [|v4|]) 
    @MaxLocals 5
    @MaxStack 2
    @GenericSignature "(ITK;TV;Ljava/util/HashMap$Entry<TK;TV;>;)V"
    @Owner (|java.util.HashMap$Entry|)
    @Access (CONSTRUCTOR)
    @Desc "java.util.HashMap$Entry.<init>(ILjava.lang.Object;Ljava.lang.Object;Ljava.util.HashMap$Entry;)V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.lang.Object.<init>()V|}([|v0|]) @ClassDescriptor (|java.lang.Object|) @Type special;
    #L00001Aa. [|v0|].<|java.util.HashMap$Entry.value|> := [|v3|] @Type (|java.lang.Object|);
    #L00002Aa. [|v0|].<|java.util.HashMap$Entry.next|> := [|v4|] @Type (|java.util.HashMap$Entry|);
    #L00003Aa. [|v0|].<|java.util.HashMap$Entry.key|> := [|v2|] @Type (|java.lang.Object|);
    #L00004Aa. [|v0|].<|java.util.HashMap$Entry.hash|> := [|v1|] @Type (|int|);
    #L00005Aa. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|} ((|java.util.HashMap$Entry|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()TK;"
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Desc "java.util.HashMap$Entry.getKey()Ljava.lang.Object;" 
  {
    local jmp;
    s0;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$Entry.key|> @Type (|java.lang.Object|);
    #L00000Ab. return s0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|} ((|java.util.HashMap$Entry|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @GenericSignature "()TV;"
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Desc "java.util.HashMap$Entry.getValue()Ljava.lang.Object;" 
  {
    local jmp;
    s0;

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00000Ab. return s0;
  }
  procedure (|java.lang.Object|) {|java.util.HashMap$Entry.setValue(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.HashMap$Entry|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 3
    @MaxStack 2
    @GenericSignature "(TV;)TV;"
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Desc "java.util.HashMap$Entry.setValue(Ljava.lang.Object;)Ljava.lang.Object;" 
  {
    local jmp;
    s0;
    [|v2|];

    #L00000Aa. s0 := [|v0|].<|java.util.HashMap$Entry.value|> @Type (|java.lang.Object|);
    #L00000Ab. [|v2|] := s0 @Type (|java.lang.Object|);
    #L00001Aa. [|v0|].<|java.util.HashMap$Entry.value|> := [|v1|] @Type (|java.lang.Object|);
    #L00002Aa. return [|v2|];
  }
  procedure (|boolean|) {|java.util.HashMap$Entry.equals(Ljava.lang.Object;)Z|} ((|java.util.HashMap$Entry|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @MaxLocals 7
    @MaxStack 2
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Desc "java.util.HashMap$Entry.equals(Ljava.lang.Object;)Z" 
  {
    local jmp;
    s0;
    [|v2|];
    [|v3|];
    [|v4|];
    [|v5|];
    [|v6|];

    #L00000Aa. s0 := instanceof @varname [|v1|] @Type "(|java.util.Map$Entry|)";
    #L00000Ab. if s0 != 0 then goto L00001Aa;
    #L00002Aa. return 0;
    #L00001Aa. <@Frame (@Same, 0, `[(|top|), (|top|), (|top|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00001Ab. [|v2|] := ((|java.util.Map$Entry|)) [|v1|] @Type (|java.util.Map$Entry|);
    #L00003Aa. call s0  := {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00003Ab. [|v3|] := s0 @Type (|java.lang.Object|);
    #L00004Aa. call s0  := {|java.util.Map$Entry.getKey()Ljava.lang.Object;|}([|v2|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00004Ab. [|v4|] := s0 @Type (|java.lang.Object|);
    #L00005Aa. if [|v3|] == [|v4|] then goto L00006Aa;
    #L00005Ab. if [|v3|] == null then goto L00007Aa;
    #L00005Ac. call s0  := {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v3|],[|v4|]) @ClassDescriptor (|java.lang.Object|) @Type virtual;
    #L00005Ad. if s0 == 0 then goto L00007Aa;
    #L00006Aa. <@Frame (@Append, 3, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00006Ab. call s0  := {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00006Ac. [|v5|] := s0 @Type (|java.lang.Object|);
    #L00008Aa. call s0  := {|java.util.Map$Entry.getValue()Ljava.lang.Object;|}([|v2|]) @ClassDescriptor (|java.util.Map$Entry|) @Type interface;
    #L00008Ab. [|v6|] := s0 @Type (|java.lang.Object|);
    #L00009Aa. if [|v5|] == [|v6|] then goto L00010Aa;
    #L00009Ab. if [|v5|] == null then goto L00007Aa;
    #L00009Ac. call s0  := {|java.lang.Object.equals(Ljava.lang.Object;)Z|}([|v5|],[|v6|]) @ClassDescriptor (|java.lang.Object|) @Type virtual;
    #L00009Ad. if s0 == 0 then goto L00007Aa;
    #L00010Aa. <@Frame (@Append, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00010Ab. return 1;
    #L00007Aa. <@Frame (@Chop, 2, `[(|java.lang.Object|), (|java.lang.Object|), (|java.lang.Object|), (|top|), (|top|), (|top|), (|top|)], 0, `[(|top|), (|top|)])>
    #L00007Ab. return 0;
  }
  procedure (|int|) {|java.util.HashMap$Entry.hashCode()I|} ((|java.util.HashMap$Entry|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 2
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Desc "java.util.HashMap$Entry.hashCode()I" 
  {
    local jmp;
    s0;
    s1;
    s2;
    s3;

    #L00000Aa. call s0  := {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00000Ab. call s1  := {|java.util.Objects.hashCode(Ljava.lang.Object;)I|}(s0) @ClassDescriptor (|java.util.Objects|) @Type direct;
    #L00000Ac. call s2  := {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00000Ad. call s3  := {|java.util.Objects.hashCode(Ljava.lang.Object;)I|}(s2) @ClassDescriptor (|java.util.Objects|) @Type direct;
    #L00000Ae. return (s1^~s3);
  }
  procedure (|java.lang.String|) {|java.util.HashMap$Entry.toString()Ljava.lang.String;|} ((|java.util.HashMap$Entry|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 2
    @Owner (|java.util.HashMap$Entry|)
    @Access (PUBLIC,FINAL)
    @Desc "java.util.HashMap$Entry.toString()Ljava.lang.String;" 
  {
    local jmp;
    s0;
    s1;
    s2;
    s3;
    s4;
    s5;
    s6;
    s7;

    #L00000Aa. s0 := new (|java.lang.StringBuilder|);
    #L00000Ab. call s1  := {|java.lang.StringBuilder.<init>()V|}(s0) @ClassDescriptor (|java.lang.StringBuilder|) @Type special;
    #L00000Ac. call s2  := {|java.util.HashMap$Entry.getKey()Ljava.lang.Object;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00000Ad. call s3  := {|java.lang.StringBuilder.append(Ljava.lang.Object;)Ljava.lang.StringBuilder;|}(s0,s2) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00000Ae. call s4  := {|java.lang.StringBuilder.append(Ljava.lang.String;)Ljava.lang.StringBuilder;|}(s3,"=") @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00000Af. call s5  := {|java.util.HashMap$Entry.getValue()Ljava.lang.Object;|}([|v0|]) @ClassDescriptor (|java.util.HashMap$Entry|) @Type virtual;
    #L00000Ag. call s6  := {|java.lang.StringBuilder.append(Ljava.lang.Object;)Ljava.lang.StringBuilder;|}(s4,s5) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00000Ah. call s7  := {|java.lang.StringBuilder.toString()Ljava.lang.String;|}(s6) @ClassDescriptor (|java.lang.StringBuilder|) @Type virtual;
    #L00000Ai. return s7;
  }
  procedure (|void|) {|java.util.HashMap$Entry.recordAccess(Ljava.util.HashMap;)V|} ((|java.util.HashMap$Entry|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 0
    @GenericSignature "(Ljava/util/HashMap<TK;TV;>;)V"
    @Owner (|java.util.HashMap$Entry|)
    @Access ()
    @Desc "java.util.HashMap$Entry.recordAccess(Ljava.util.HashMap;)V" 
  {
    local jmp;

    #L00000Aa. return @void;
  }
  procedure (|void|) {|java.util.HashMap$Entry.recordRemoval(Ljava.util.HashMap;)V|} ((|java.util.HashMap$Entry|) [|v0|], (|java.util.HashMap|) [|v1|]) 
    @MaxLocals 2
    @MaxStack 0
    @GenericSignature "(Ljava/util/HashMap<TK;TV;>;)V"
    @Owner (|java.util.HashMap$Entry|)
    @Access ()
    @Desc "java.util.HashMap$Entry.recordRemoval(Ljava.util.HashMap;)V" 
  {
    local jmp;

    #L00000Aa. return @void;
  }

record (|java.util.HashMap$Holder|)
    @Source "HashMap.java"
    @Type class
    @AccessFlag ()
    @InnerClass (
      @Name (|java.util.HashMap$Holder|), 
      @OuterName (|java.util.HashMap|), 
      @InnerName Holder, 
      @AccessFlag (PRIVATE,STATIC)
     ) 
  extends 
    (|java.lang.Object|) 
{
  (|int|) <|HashMap$Holder.ALTERNATIVE_HASHING_THRESHOLD|> @AccessFlag (STATIC,FINAL);
}

  procedure (|void|) {|java.util.HashMap$Holder.<init>()V|} ((|java.util.HashMap$Holder|) [|v0|]) 
    @MaxLocals 1
    @MaxStack 1
    @Owner (|java.util.HashMap$Holder|)
    @Access (PRIVATE,CONSTRUCTOR)
    @Desc "java.util.HashMap$Holder.<init>()V" 
  {
    local jmp;
    s0;

    #L00000Aa. call s0  := {|java.lang.Object.<init>()V|}([|v0|]) @ClassDescriptor (|java.lang.Object|) @Type special;
    #L00000Ab. return @void;
  }
  procedure (|void|) {|java.util.HashMap$Holder.<clinit>()V|} () 
    @MaxLocals 3
    @MaxStack 4
    @Owner (|java.util.HashMap$Holder|)
    @Access (STATIC)
    @Desc "java.util.HashMap$Holder.<clinit>()V" 
  {
    local jmp;
    s0;
    s1;
    s2;
    [|v0|];
    [|v1|];
    [|v2|];

    #L00003Aa. s0 := new (|sun.security.action.GetPropertyAction|);
    #L00003Ab. call s1  := {|sun.security.action.GetPropertyAction.<init>(Ljava.lang.String;)V|}(s0,"jdk.map.althashing.threshold") @ClassDescriptor (|sun.security.action.GetPropertyAction|) @Type special;
    #L00003Ac. call s2  := {|java.security.AccessController.doPrivileged(Ljava.security.PrivilegedAction;)Ljava.lang.Object;|}(s0) @ClassDescriptor (|java.security.AccessController|) @Type direct;
    #L00003Ad. [|v0|] := ((|java.lang.String|)) s2 @Type (|java.lang.String|);
    #L00000Aa. if null == [|v0|] then goto L00004Aa;
    #L00000Ab. call s0  := {|java.lang.Integer.parseInt(Ljava.lang.String;)I|}([|v0|]) @ClassDescriptor (|java.lang.Integer|) @Type direct;
    #L00000Ac. jmp := s0;
    #L00000Ad. goto L00005Aa;
    #L00004Aa. <@Frame (@Append, 1, `[(|java.lang.Object|), (|top|), (|top|)], 0, `[(|top|), (|top|), (|top|), (|top|)])>
    #L00004Ab. jmp := "2147483647";
    #L00005Aa. <@Frame (@Same1, 0, `[(|java.lang.Object|), (|top|), (|top|)], 1, `[(|int|), (|top|), (|top|), (|top|)])>
    #L00005Ab. [|v1|] := jmp @Type (|java.lang.Object|);
    #L00006Aa. if [|v1|] != -1 then goto L00007Aa;
    #L00008Aa. [|v1|] := "2147483647";
    #L00007Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|)])>
    #L00007Ab. if [|v1|] >= 0 then goto L00001Aa;
    #L00009Aa. s0 := new (|java.lang.IllegalArgumentException|);
    #L00009Ab. call s1  := {|java.lang.IllegalArgumentException.<init>(Ljava.lang.String;)V|}(s0,"value must be positive integer.") @ClassDescriptor (|java.lang.IllegalArgumentException|) @Type special;
    #L00009Ac. throw s0;
    #L00001Aa. <@Frame (@Same, 0, `[(|int|), (|top|), (|top|)], 0, `[(|int|), (|top|), (|top|), (|top|)])>
    #L00001Ab. goto L00010Aa;
    #L00002Aa. <@Frame (@Full, 1, `[(|java.lang.Object|), (|top|), (|top|)], 1, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00002Ab. [|v2|] := "Exception" @Type (|java.lang.Object|);
    #L00011Aa. s0 := new (|java.lang.Error|);
    #L00011Ab. call s1  := {|java.lang.Error.<init>(Ljava.lang.String;Ljava.lang.Throwable;)V|}(s0,"Illegal value for 'jdk.map.althashing.threshold'",[|v2|]) @ClassDescriptor (|java.lang.Error|) @Type special;
    #L00011Ac. throw s0;
    #L00010Aa. <@Frame (@Append, 1, `[(|int|), (|top|), (|top|)], 0, `[(|java.lang.Object|), (|top|), (|top|), (|top|)])>
    #L00010Ab. +|java.util.HashMap$Holder.ALTERNATIVE_HASHING_THRESHOLD|+ := [|v1|] @Type (|int|);
    #L00012Aa. return @void;
      catch (|java.lang.IllegalArgumentException|) @[L00000Aa..L00001Aa] goto L00002Aa;
  }

record (|java.util.Map$Entry|)
    @Source "Map.java"
    @GenericSignature "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;"
    @Type interface
    @AccessFlag (PUBLIC,INTERFACE)
    @InnerClass (
      @Name (|java.util.Map$Entry|), 
      @OuterName (|java.util.Map|), 
      @InnerName Entry, 
      @AccessFlag (PUBLIC,INTERFACE,STATIC)
     ) 
  extends 
    (|java.lang.Object|) 
{
}

  procedure (|java.lang.Object|) {|java.util.Map$Entry.getKey()Ljava.lang.Object;|} ((|java.util.Map$Entry|) [|v0|]) 
    @GenericSignature "()TK;"
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Desc "java.util.Map$Entry.getKey()Ljava.lang.Object;" 
  {

    #L00000Aa. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.Map$Entry.getValue()Ljava.lang.Object;|} ((|java.util.Map$Entry|) [|v0|]) 
    @GenericSignature "()TV;"
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Desc "java.util.Map$Entry.getValue()Ljava.lang.Object;" 
  {

    #L00000Aa. return @void;
  }
  procedure (|java.lang.Object|) {|java.util.Map$Entry.setValue(Ljava.lang.Object;)Ljava.lang.Object;|} ((|java.util.Map$Entry|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @GenericSignature "(TV;)TV;"
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Desc "java.util.Map$Entry.setValue(Ljava.lang.Object;)Ljava.lang.Object;" 
  {

    #L00000Aa. return @void;
  }
  procedure (|boolean|) {|java.util.Map$Entry.equals(Ljava.lang.Object;)Z|} ((|java.util.Map$Entry|) [|v0|], (|java.lang.Object|) [|v1|]) 
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Desc "java.util.Map$Entry.equals(Ljava.lang.Object;)Z" 
  {

    #L00000Aa. return @void;
  }
  procedure (|int|) {|java.util.Map$Entry.hashCode()I|} ((|java.util.Map$Entry|) [|v0|]) 
    @Owner (|java.util.Map$Entry|)
    @Access (PUBLIC)
    @Desc "java.util.Map$Entry.hashCode()I" 
  {

    #L00000Aa. return @void;
  }

